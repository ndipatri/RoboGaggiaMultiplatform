openapi: 3.0.1
info:
  title: particle
  description: ''
  version: 1.0.0
tags: []
paths:
  /v1/access_tokens:
    get:
      summary: List access tokens
      deprecated: false
      description: |-
        Retrieve a list of all the issued access tokens for your account 

        Note: Pass your Particle username and password using HTTP Basic Auth.
      tags: []
      parameters:
        - name: otp
          in: query
          description: Token given from your MFA device. Usually 6 digits long
          required: false
          example: string
          schema:
            type: string
        - name: Authorization
          in: header
          description: Your Particle username and password
          required: true
          example: String
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/access_tokens
                    HTTP/1.1 200 OK
                    [
                      {
                          "token": "b5b901e8760164e134199bc2c3dd1d228acf2d98",
                          "expires_at": "2014-04-27T02:20:36.177Z",
                          "client": "particle"
                      },
                      {
                          "token": "ba54b6bb71a43b7612bdc7c972914604a078892b",
                          "expires_at": "2014-04-27T06:31:08.991Z",
                          "client": "particle"
                      }
                    ]
          headers: {}
      security:
        - basic: []
    delete:
      summary: Delete all active access tokens
      deprecated: false
      description: Delete all your active access tokens.
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/access_tokens
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/access_tokens/current:
    get:
      summary: Get the current access token information
      deprecated: false
      description: Get your currently used token.
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/access_tokens/current
                    HTTP/1.1 200 OK
                    {
                      "expires_at": "2014-04-27T06:31:08.991Z",
                      "client": "particle",
                      "scopes": [],
                      "orgs": []
                    }
          headers: {}
    delete:
      summary: Delete current access token
      deprecated: false
      description: Delete your currently used token.
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/access_tokens/current
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /oauth/token:
    post:
      summary: Generate a customer scoped access token
      deprecated: false
      description: >-
        Creates a token scoped to a customer for your organization. 


        You must give a valid product OAuth client ID and secret in HTTP Basic
        Auth or in the client_id and client_secret parameters.
      tags: []
      parameters:
        - name: Content-Type
          in: header
          description: Must be set to application/x-www-form-urlencoded
          required: true
          example: application/x-www-form-urlencoded
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            HTTP Basic Auth where username is the OAuth client ID and password
            is the OAuth client secret.
          required: true
          example: String
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                client_id:
                  example: string
                  type: string
                client_secret:
                  example: string
                  type: string
                grant_type:
                  example: string
                  type: string
                expires_in:
                  example: '0'
                  type: string
                expires_at:
                  example: '2024-10-07T10:03:32.019Z'
                  type: string
                scope:
                  example: string
                  type: string
              required:
                - grant_type
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /oauth/token
                    HTTP/1.1 200 OK
                    {
                      "access_token": "254406f79c1999af65a7df4388971354f85cfee9",
                      "token_type": "bearer",
                      "expires_in": 7776000,
                      "refresh_token": "b5b901e8760164e134199bc2c3dd1d228acf2d90"
                    }
          headers: {}
      security:
        - basic: []
  /v1/access_tokens/{token}:
    delete:
      summary: Delete an access token
      deprecated: false
      description: |-
        Delete your unused or lost tokens. 

        DEPRECATED. Use the DELETE /v1/access_tokens/current endpoint instead.
      tags: []
      parameters:
        - name: token
          in: path
          description: Access Token to delete
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/access_tokens/123abc
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/config:
    get:
      summary: Get product schema
      deprecated: false
      description: >-
        Get the possible values that can be configured for this product, in JSON
        Schema format
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: Accept
          in: header
          description: Must be set to "application/schema+json" for this endpoint
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     GET https://api.particle.io/v1/products/1234/config
                     HTTP/1.1 200 OK
                    {
                       "$schema": "http://json-schema.org/draft-07/schema",
                       "properties": {
                         ...
                      }
                    }
          headers: {}
    put:
      summary: Set product configuration schema
      deprecated: false
      description: >-
        Set configuration schema that will become the default for the product. 


        This must be the entire schema, including the standard Particle parts;
        there is no merging of changes.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: Must be set to "application/schema+json" for this endpoint.
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT https://api.particle.io/v1/products/1234/config
                    HTTP/1.1 200 OK
                    {
                        "$schema": "https://particle.io/draft-07/schema#",
                        "type": "object",
                        "title": "Fake Custom Schema",
                        "description": "A customized JSON schema for testing",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "$id": "#/properties/foo",
                                "type": "integer",
                                "title": "Foo",
                                "description": "A test setting named `foo`",
                                "default": 1,
                                "examples": [1, 2, 3],
                                "minimum": 0
                            },
                            "bar": {
                                "$id": "#/properties/bar",
                                "type": "string",
                                "title": "Bar",
                                "description": "A test setting named `bar`",
                                "default": "",
                                "examples": ["one", "two", "three"]
                            }
                        }
                    }
          headers: {}
    delete:
      summary: Delete product configuration schema
      deprecated: false
      description: Delete configuration schema, use Tracker Edge defaults.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: Must be set to "application/schema+json" for this endpoint.
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT https://api.particle.io/v1/products/1234/config
                    HTTP/1.1 204 OK
          headers: {}
  /v1/products/{productIdOrSlug}/config/{deviceId}:
    get:
      summary: Get device schema
      deprecated: false
      description: >-
        Get the possible values that can be configured for one device in this
        product, in JSON Schema format
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: path
          description: The device ID to query.
          required: true
          example: string
          schema:
            type: string
        - name: Accept
          in: header
          description: Must be set to "application/schema+json" for this endpoint
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     GET https://api.particle.io/v1/products/1234/config/abc123
                     HTTP/1.1 200 OK
                    {
                       "$schema": "http://json-schema.org/draft-07/schema",
                       "properties": {
                         ...
                      }
                    }
          headers: {}
    put:
      summary: Set device configuration schema
      deprecated: false
      description: >-
        Set configuration schema for the device. 


        This must be the entire schema, including the standard Particle parts;
        there is no merging of changes.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: Must be set to "application/schema+json" for this endpoint.
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT https://api.particle.io/v1/products/1234/config/43210
                    HTTP/1.1 200 OK
                    {
                        "$schema": "https://particle.io/draft-07/schema#",
                        "type": "object",
                        "title": "Fake Custom Schema",
                        "description": "A customized JSON schema for testing",
                        "required": [
                            "foo"
                        ],
                        "properties": {
                            "foo": {
                                "$id": "#/properties/foo",
                                "type": "integer",
                                "title": "Foo",
                                "description": "A test setting named `foo`",
                                "default": 1,
                                "examples": [1, 2, 3],
                                "minimum": 0
                            },
                            "bar": {
                                "$id": "#/properties/bar",
                                "type": "string",
                                "title": "Bar",
                                "description": "A test setting named `bar`",
                                "default": "",
                                "examples": ["one", "two", "three"]
                            }
                        }
                    }
          headers: {}
    delete:
      summary: Delete device configuration schema
      deprecated: false
      description: Delete device's configuration schema, use product's.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: path
          description: The device ID to delete the schema.
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: Must be set to "application/schema+json" for this endpoint.
          required: true
          example: application/schema+json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT https://api.particle.io/v1/products/1234/config/43210
                    HTTP/1.1 204 OK
          headers: {}
  /v1/products/{productIdOrSlug}/customers:
    get:
      summary: List customers for a product
      deprecated: false
      description: List Customers for a product.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/photon\nHTTP/1.1 200 OK\n{\n  \"customers\": [\n    {\n      \"id\": \"01234567890ABCDEF\",\n      \"full_name\": \"Bob Loblaw\",\n      \"username\": \"bob@loblaw.net\",\n      \"devices\": [\"0123456789abcdef01234567\"]\n    }\n  ],\n  \"devices\": [\n  \t{\n  \t\t\"id\": \"0123456789abcdef01234567\",\n  \t\t\"product_id\": 6,\n  \t\t\"last_ip_address\": \"127.0.0.1\",\n  \t\t\"firmware_version\": 1,\n  \t\t\"online\": true\n  \t}\n  ],\n  \"meta\": {\n  \t\"total_pages\": 4\n  }\n}"
          headers: {}
    post:
      summary: Create a customer - Implicit
      deprecated: false
      description: >-
        Create a customer for a product using OAuth implicit grant type. This is
        the way you should hit the POST customers endpoint if you are creating
        customers from a web browser. After a successful POST, the customer
        access token will be appended as a hash to the redirect URI associated
        with the client credentials provided. For this grant type, you must also
        pass response_type: token. 


        You must give a valid product OAuth client ID in HTTP Basic Auth or in
        the client_id parameter. Do not pass the OAuth client secret when
        creating customers from a web browser.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: Authorization
          in: header
          description: >-
            HTTP Basic Auth where username is the OAuth client ID and password
            is blank.
          required: true
          example: String
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "client_id": "string",
                "email": "string",
                "password": "string",
                "response_type": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/products/photon/customers
                    HTTP/1.1 201 OK
          headers: {}
      security:
        - basic: []
  /v1/products/{productIdOrSlug}/customers/{customerEmail}:
    put:
      summary: Update customer password
      deprecated: false
      description: >-
        Update the account password for a customer. Only relevant for non-shadow
        customers that have a password saved in Particle's system. Must be
        called with an access token that has access to the product, not a
        customer access token.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: customerEmail
          in: path
          description: Email of the customer account that you'd like to update
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "password": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/products/:productIdOrSlug/customers/:customerEmail
                    HTTP/1.1 200 OK

                    {"ok": true}
          headers: {}
    delete:
      summary: Delete a customer
      deprecated: false
      description: >-
        Delete a customer in a product. Will also revoke all of this customer's
        access tokens, pending device claim codes and activation codes.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: customerEmail
          in: path
          description: Email of the customer account that you'd like to remove
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    DELETE
                    /v1/products/:productIdOrSlug/customers/:customerEmail

                    HTTP/1.1 200 OK


                    {"ok": true}
          headers: {}
  /v1/serial_numbers/{serial_number}:
    get:
      summary: Look up device identification from a serial number
      deprecated: false
      description: >-
        Return the device ID and SIM card ICCD (if applicable) for a device by
        serial number. This API can look up devices that you have not yet added
        to your product and is rate limited to 50 requests per hour. Once you've
        imported your devices to your product you should instead use the list
        devices in a product API and filter on serial number. No special rate
        limits apply to that API.
      tags: []
      parameters:
        - name: serial_number
          in: path
          description: The serial number printed on the barcode of the device packaging.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/serial_numbers/E26AAA111111111
                    HTTP/1.1 200 OK
                    {
                      "ok": true,
                      "deviceID": "0123456789abcdef01234567",
                      "iccid": "8934076500002589174"
                    }
          headers: {}
  /v1/devices:
    get:
      operationId: 'getDevices'
      summary: List devices
      deprecated: false
      description: >-
        List devices the currently authenticated user has access to. By default,
        devices will be sorted by last_handshake_at in descending order.
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/devices
                    HTTP/1.1 200 OK
                    [
                      {
                        "id": "53ff6f0650723",
                        "name": "plumber_laser",
                        "last_ip_address": "10.0.0.1",
                        "last_heard": "2020-05-28T14:46:07.586Z",
                        "last_handshake_at": "2020-05-27T18:13:01.059Z",
                        "product_id": 6,
                        "online": true,
                        "platform_id": 6,
                        "cellular": false,
                        "notes": "laser!",
                        "functions": [
                          "fire"
                        ],
                        "variables": {
                          "power": "int32"
                        },
                        "status": "normal",
                        "serial_number": "PH1234",
                        "mac_wifi": "00:00:00:AA:BB:00",
                        "system_firmware_version": "1.5.0"
                      },
                      {
                        "id": "53ff291839887",
                        "name": "particle_love",
                        "last_ip_address": "10.0.0.1",
                        "last_heard": "2020-05-28T14:46:07.586Z",
                        "last_handshake_at": "2020-05-27T18:13:01.059Z",
                        "product_id": 10,
                        "online": false,
                        "platform_id": 10,
                        "notes": null,
                        "functions": [],
                        "variables": {},
                        "cellular": true,
                        "status": "normal",
                        "serial_number": "E261234",
                        "iccid": "1111111111111111111",
                        "imei": "333333333333333",
                        "system_firmware_version": "1.5.0"
                      }
                    ]
          headers: {}
    post:
      summary: Claim a device
      deprecated: false
      description: Claim a new or unclaimed device to your account.
      tags: []
      parameters: []
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "id": "string",
                "request_transfer": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
  /v1/products/{productIdOrSlug}/devices:
    get:
      summary: List devices in a product
      deprecated: false
      description: >-
        List all devices that are part of a product. Results are paginated, by
        default returns 25 device records per page.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: query
          description: Filter results to devices with this ID (partial matching)
          required: false
          example: string
          schema:
            type: string
        - name: groups
          in: query
          description: >-
            Comma separated list of full group names to filter results to
            devices belonging to these groups only
          required: false
          example: string
          schema:
            type: string
        - name: deviceName
          in: query
          description: Filter results to devices with this name (partial matching)
          required: false
          example: string
          schema:
            type: string
        - name: serialNumber
          in: query
          description: Filter results to devices with this serial number (partial matching)
          required: false
          example: string
          schema:
            type: string
        - name: sortAttr
          in: query
          description: >-
            The attribute by which to sort results. Options for sorting are
            deviceName, deviceId, firmwareVersion, or lastConnection. By
            default, if no sortAttr parameter is set, devices will be sorted by
            last connection, in descending order
          required: false
          example: string
          schema:
            type: string
        - name: sortDir
          in: query
          description: >-
            The direction of sorting. Pass asc for ascending sorting or desc for
            descending sorting
          required: false
          example: string
          schema:
            type: string
        - name: quarantined
          in: query
          description: include / exclude quarantined devices
          required: false
          example: 'false'
          schema:
            type: string
        - name: page
          in: query
          description: Current page of results
          required: false
          example: '0'
          schema:
            type: string
        - name: perPage
          in: query
          description: Records per page
          required: false
          example: '0'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/devices\nHTTP/1.1 200 OK\n{\n\t\"devices\": [\n\t \t{\n\t \t\t\"id\":\"1d002a000547343232363230\",\n\t \t\t\"name\":\"jeff_test_device\",\n\t \t\t\"last_ip_address\":\"199.230.10.194\",\n\t \t\t\"last_heard\":\"2016-06-10T15:00:07.100Z\",\n\t \t\t\"last_handshake_at\":\"2016-06-10T14:56:27.100Z\",\n\t \t\t\"product_id\":295,\n\t \t\t\"online\":false,\n\t \t\t\"platform_id\": 13,\n\t \t    \"cellular\": true,\n\t \t    \"functions\": [\n\t \t      \"cmd\"\n\t \t    ],\n\t \t    \"variables\": {\n\t \t      \"temperature\": \"double\"\n\t \t    },\n\t \t    \"status\": \"normal\",\n\t \t    \"serial_number\": \"E40KAB111111111\",\n\t \t    \"iccid\": \"89014111111111111111\",\n         \"imei\": \"352753090000000\",\n         \"mac_wifi\": \"00:00:00:AA:BB:00\",\n         \"mobile_secret\": \"WBPYG6CPLRCFK4S\",\n\t \t    \"system_firmware_version\": \"3.0.0\",\n\t \t    \"firmware_product_id\": 295,\n\t \t    \"groups\":[\"asia\",\"europe\"],\n\t \t\t\"firmware_version\":3,\n\t \t    \"desired_firmware_version\": null,\n\t \t    \"targeted_firmware_release_version\": 3,\n\t \t\t\"development\":false,\n\t \t\t\"quarantined\":false,\n\t \t\t\"denied\":false,\n\t \t\t\"owner\":\"jeff@particle.io\"\n\t \t},\n\t \t{\n\t \t\t\"id\":\"32001e000747343337373738\",\n\t \t\t\"last_ip_address\":\"199.21.86.18\",\n\t \t\t\"last_heard\":\"2016-06-10T15:00:07.100Z\",\n\t \t\t\"last_handshake_at\":\"2016-06-10T14:56:27.100Z\",\n\t \t\t\"product_id\":13,\n\t \t\t\"online\":false,\n\t \t\t\"platform_id\": 13,\n\t \t    \"cellular\": true,\n\t \t    \"status\": \"normal\",\n\t \t    \"serial_number\": \"E40KAB111111112\",\n\t \t    \"iccid\": \"89014111111111111112\",\n         \"imei\": \"352753090000001\",\n         \"mac_wifi\": \"00:00:00:AA:BB:01\",\n         \"mobile_secret\": \"VNH9JNXMXW5YY9X\",\n\t \t    \"system_firmware_version\": \"2.0.0\",\n\t \t    \"firmware_product_id\": 295,\n\t \t    \"development\": false,\n\t \t\t\"quarantined\": true,\n\t \t\t\"denied\": false\n\t \t},\n\t \t...\n\t],\n\t\"customers\": [\n\t\t{\n\t \t \tid:\"123abc3456\",\n\t\t \tusername: \"customer@gmail.com\",\n\t\t}\n\t],\n\t\"meta\": {\n\t\t\"total_pages\":1\n\t}\n}"
          headers: {}
    post:
      summary: Approve a quarantined device
      deprecated: false
      description: >-
        Approve a quarantined device. This will immediately release the device
        from quarantine and allow it to publish events, receive firmware
        updates, etc.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "id": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/products/photon/devices
                    { "id": "123abc" }
                    HTTP/1.1 200 OK
          headers: {}
    put:
      summary: Batch assign groups to devices
      deprecated: false
      description: >-
        Assign groups to devices in a product as a batch action. Groups can
        either be added or removed from all devices passed to the endpoint.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "action": "string",
                "devices": [
                  {
                    "key": "value"
                  },
                  {
                    "key": "value"
                  }
                ],
                "metadata": {
                  "key": "value",
                  "add": [
                    {
                      "key": "value"
                    },
                    {
                      "key": "value"
                    }
                  ],
                  "remove": [
                    {
                      "key": "value"
                    },
                    {
                      "key": "value"
                    }
                  ]
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/products/:productIdOrSlug/devices
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/devices/{deviceId}:
    get:
      operationId: 'getDevice'
      summary: Get device information
      deprecated: false
      description: >-
        Get basic information about the given device, including the custom
        variables and functions it has exposed. This can be called for sandbox
        devices claimed to your account and for product devices you have access
        to, regardless of claiming.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/devices/0123456789abcdef01234567
                    HTTP/1.1 200 OK
                    {
                      "id": "0123456789abcdef01234567",
                      "name": "gongbot",
                      "owner": "someone@particle.io",
                      "last_ip_address": "176.83.211.237",
                      "last_heard": "2015-07-17T22:28:40.907Z",
                      "last_handshake_at": "2015-07-15T20:08:00.456Z",
                      "product_id": 13,
                      "online": true,
                      "platform_id": 13,
                      "cellular": true,
                      "notes": null,
                      "functions": [
                        "gong",
                        "goto"
                      ],
                      "variables": {
                        "Gongs": "int32"
                      },
                      "status": "normal",
                      "serial_number": "AAAAAA111111111",
                      "iccid": "89314404000111111111",
                      "imei": "357520000000000",
                      "mac_wifi": "00:00:00:AA:BB:00",
                      "mobile_secret": "NVYM5RK6AHCBELA",
                      "system_firmware_version": "1.5.0",
                      "firmware_updates_enabled": true,
                      "firmware_updates_forced": false,
                      "device_protection": {
                          "status": "disabled"
                      }
                    }
          headers: {}
    put:
      summary: Flash a device with a bundle
      deprecated: false
      description: Update the device firmware from a bundle
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "file": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/devices/0123456789abcdef01234567
                    HTTP/1.1 200 OK
                    {
                      "id": "0123456789abcdef01234567",
                      "status": "Update started"
                    }
          headers: {}
    delete:
      summary: Unclaim device
      deprecated: false
      description: >-
        Remove ownership of a device. This will unclaim regardless if the device
        is owned by a user or a customer, in the case of a product. 


        When using this endpoint to unclaim a product device, the route looks
        slightly different: 


        DELETE /v1/products/:productIdOrSlug/devices/:deviceId/owner 


        Note the /owner at the end of the route.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: ID of the device to be unclaimed
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/devices/12345
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/devices/{deviceId}:
    get:
      summary: Get product device information
      deprecated: false
      description: |-
        Get basic information about a given device that is part of a product 

        See Get device information for the response attributes
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
    delete:
      summary: Deny a quarantined device
      deprecated: false
      description: Deny a quarantined device
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: path
          description: ID of the device to be denied
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/products/photon/devices/123abc
                    { deny: true }
                    HTTP/1.1 204 NO CONTENT
          headers: {}
    put:
      summary: Assign groups to a device
      deprecated: false
      description: >-
        Update group memberships for an individual device. This is an absolute
        endpoint, meaning that regardless of previous group memberships, the
        group names passed to this endpoint will be the ones assigned to the
        device. 


        If you pass a group name that does not yet exist, it will be created and
        assigned to the device.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "groups": [
                  {
                    "key": "value"
                  },
                  {
                    "key": "value"
                  }
                ]
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/products/:productIdOrSlug/devices/12345
                    HTTP/1.1 200 OK
                    {
                      "id": "0123456789abcdef01234567",
                      "groups": ["europe", "asia"]
                      "updated_at": "2017-03-10T20:21:49.059Z"
                    }
          headers: {}
  /v1/devices/{deviceId}/{varName}:
    get:
      operationId: 'getVariableValue'
      summary: Get a variable value
      deprecated: false
      description: >-
        Request the current value of a variable exposed by the device. Variables
        can be read on a device you own, or for any device that is part of a
        product you are a team member of.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: varName
          in: path
          description: Variable name
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: format
          in: query
          description: Specify raw if you just the value returned
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceVariableResult'
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/devices/0123456789abcdef01234567/temperature
                    HTTP/1.1 200 OK
                    {
                      "name": "temperature",
                      "result": 46,
                      "coreInfo": {
                        "name": "weatherman",
                        "deviceID": "0123456789abcdef01234567",
                        "connected": true,
                        "last_handshake_at": "2015-07-17T22:28:40.907Z",
                      }
                    }
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    /v1/devices/0123456789abcdef01234567/temperature?format=raw

                    HTTP/1.1 200 OK

                    46
          headers: {}
  /v1/devices/{deviceId}/{functionName}:
    post:
      operationId: 'callFunction'
      summary: Call a function
      deprecated: false
      description: >-
        Call a function exposed by the device, with arguments passed in the
        request body. Functions can be called on a device you own, or for any
        device that is part of a product you are a team member of.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: ''
          required: true
          example: string
          schema:
            type: string
        - name: functionName
          in: path
          description: ''
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CallFunctionRequest'
            example: |-
              {
                "arg": "string",
                "format": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceFunctionResponse'
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/devices/0123456789abcdef01234567/gong
                    { "arg": "ZEN PLEASE" }
                    HTTP/1.1 200 OK
                    {
                      "id": "0123456789abcdef01234567",
                      "name": "gongbot",
                      "connected": true,
                      "return_value": 1
                    }
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/devices/0123456789abcdef01234567/gong
                    { "format": "raw", "arg": "ZEN PLEASE" }
                    HTTP/1.1 200 OK
                    1
          headers: {}
  /v1/devices/{deviceId}/ping:
    put:
      summary: Ping a device
      deprecated: false
      description: >-
        This will ping a device, enabling you to see if your device is online or
        offline
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: ''
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/devices/0123456789abcdef01234567/ping
                    HTTP/1.1 200 OK
                    {
                      "online": true,
                      "ok": true
                    }
          headers: {}
  /v1/diagnostics/{deviceId}/last:
    get:
      summary: Get last known device vitals
      deprecated: false
      description: >-
        Returns the last device vitals payload sent by the device to the Device
        Cloud.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/diagnostics/0123456789abcdef01234567/last
                    HTTP/1.1 200 OK
                    {
                      "diagnostics": {
                        "updated_at": "2017-12-19T12:37:07.318Z",
                        "deviceID": "0123456789abcdef01234567",
                        "payload": {
                          ... the [device vitals event payload](#device-vitals-event).
                        }
                      }
                    }
          headers: {}
  /v1/diagnostics/{deviceId}:
    get:
      summary: Get all historical device vitals
      deprecated: false
      description: >-
        Returns all stored device vital records sent by the device to the Device
        Cloud. Device vitals records will expire after 1 month.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: Oldest diagnostic to return, inclusive. Date in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.032Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: Newest diagnostic to return, exclusive. Date in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.032Z'
          schema:
            type: string
        - name: Accept
          in: header
          description: Optionally set to text/csv to return historic device vitals as a CSV
          required: true
          example: String
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: " GET /v1/diagnostics/0123456789abcdef01234567/\n HTTP/1.1 200 OK\n {\n\t\t\"diagnostics\": [\n\t\t\t{\n\t\t\t\t\"updated_at\": \"2017-12-19T12:37:07.318Z\",\n\t\t\t\t\"deviceID\": \"0123456789abcdef01234567\",\n\t\t\t\t\"payload\": {\n\t\t\t\t\t... the [device vitals event payload](#device-vitals-event).\n\t\t\t\t}\n\t\t\t},\n\t\t\t...\n\t\t]\n }"
          headers: {}
  /v1/sims/{iccid}/status:
    get:
      summary: Get cellular network status
      deprecated: false
      description: >-
        Get cellular network status for a given device. Kicks off a long running
        task that checks if the device/SIM has an active data session with a
        cell tower. Values for keys in the sim_status object will be null until
        the task has finished. Poll the endpoint until meta.state is complete.
        At this point, the sim_status object will be populated. 


        Note that responses are cached by the cellular network providers. This
        means that on occasion, the real-time status of the device/SIM may not
        align with the results of this test.
      tags: []
      parameters:
        - name: iccid
          in: path
          description: The ICCID of the desired SIM
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/sims/:iccid/status\nHTTP/1.1 202\n{\n\t\"ok\": true,\n\t\"meta\": {\n\t\t\"created_at\": \"2018-05-29T19:31:55.000-06:00\",\n\t\t\"expires_at\": \"2018-05-29T19:34:55.000-06:00\",\n\t\t\"check_again_after\": \"2018-05-29T19:32:05.450-06:00\",\n\t\t\"state\": \"pending\",\n\t\t\"method\": \"async\",\n\t\t\"task_id\": \"1234abcd\"\n\t},\n\t\"sim_status\": {\n\t\t\"connected\": true,\n\t\t\"gsm_connection\": true,\n\t\t\"data_connection\": true,\n\t}\n}"
          headers: {}
  /v1/diagnostics/{deviceId}/update:
    post:
      summary: Refresh device vitals
      deprecated: false
      description: >-
        Refresh diagnostic vitals for a single device. This will instruct the
        device to publish a new event to the Device Cloud containing a device
        vitals payload. This is an asynchronous request: the HTTP request
        returns immediately after the request to the device is sent. In order
        for the device to respond with a vitals payload, it must be online and
        connected to the Device Cloud. 


        The device will respond by publishing an event named
        spark/device/diagnostics/update. See the description of the device
        vitals event.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/diagnostics/0123456789abcdef01234567/update
                    HTTP/1.1 202
                    {
                      "ok": true
                    }
          headers: {}
  /v1/events/{eventPrefix}:
    get:
      summary: Get a stream of events
      deprecated: false
      description: >-
        Open a stream of Server Sent Events for all events. for your devices
        matching the filter. 


        Note that as of April 2018, the event prefix filter is required. It was
        optional before.
      tags: []
      parameters:
        - name: eventPrefix
          in: path
          description: >-
            Filters the stream to only events starting with the specified
            prefix. The event prefix filter is required for this endpoint.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET /v1/events/temp

                    HTTP/1.1 200 OK

                    :ok


                    event: temperature

                    data:
                    {"data":"25.34","ttl":"60","published_at":"2015-07-18T00:12:18.174Z","coreid":"0123456789abcdef01234567"}
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/events
                    HTTP/1.1 400 Bad Request
                    { ok: false, error: "event prefix filter is required" }
          headers: {}
  /v1/devices/events/{eventPrefix}:
    get:
      summary: Get a stream of your events
      deprecated: false
      description: Open a stream of Server Sent Events for all events for your devices.
      tags: []
      parameters:
        - name: eventPrefix
          in: path
          description: >-
            Filters the stream to only events starting with the specified
            prefix. Omit to get all events.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET /v1/devices/events

                    HTTP/1.1 200 OK

                    :ok


                    event: temperature

                    data:
                    {"data":"25.34","ttl":"60","published_at":"2015-07-18T00:12:18.174Z","coreid":"0123456789abcdef01234567"}
          headers: {}
  /v1/devices/{deviceId}/events/{eventPrefix}:
    get:
      summary: Get a stream of events for a device
      deprecated: false
      description: >-
        Open a stream of Server Sent Events for all events for the specified
        device.
      tags: []
      parameters:
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: eventPrefix
          in: path
          description: Filters the stream to only events starting with the specified prefix
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET /v1/devices/0123456789abcdef01234567/events

                    HTTP/1.1 200 OK

                    :ok


                    event: temperature

                    data:
                    {"data":"25.34","ttl":"60","published_at":"2015-07-18T00:12:18.174Z","coreid":"0123456789abcdef01234567"}
          headers: {}
  /v1/products/{productIdOrSlug}/events/{eventPrefix}:
    get:
      summary: Product event stream
      deprecated: false
      description: Open a stream of Server Sent Events for all events for a product.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: eventPrefix
          in: path
          description: Filters the stream to only events starting with the specified prefix
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET /v1/products/photon/events

                    HTTP/1.1 200 OK

                    :ok


                    event: temperature

                    data:
                    {"data":"25.34","ttl":"60","published_at":"2015-07-18T00:12:18.174Z","coreid":"0123456789abcdef01234567"}
          headers: {}
  /v1/devices/events:
    post:
      summary: Publish an event
      deprecated: false
      description: Publish an event
      tags: []
      parameters: []
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "data": "string",
                "ttl": 0
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/devices/events
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/events:
    post:
      summary: Publish a product event
      deprecated: false
      description: Publish an event that is sent to the product's event stream
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "data": "string",
                "ttl": 0
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/products/:productIdOrSlug/events
                    HTTP/1.1 200 OK
                    {
                      "ok": true
                    }
          headers: {}
  /v1/build_targets:
    get:
      summary: List firmware build targets
      deprecated: false
      description: >-
        Lists the firmware versions for all platforms that can be used as build
        targets during firmware compilation. 


        Note: This endpoint does not require an access token.
      tags: []
      parameters:
        - name: featured
          in: query
          description: When true, show most relevant (featured) build targets only.
          required: true
          example: 'false'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >2-
                     PUT /v1/build_targets
                     HTTP/1.1 200 OK
                     {
                       "targets": [
                         {
                           "platforms": [
                             0,
                             10,
                             8,
                             6
                           ],
                           "prereleases": [],
                           "firmware_vendor": "Particle",
                           "version": "0.6.1"
                         }
                       ],
                       "platforms": {
                         "Core": 0,
                         "Photon": 6,
                         "P1": 8,
                         "Electron": 10
                       },
                       "default_versions": {
                         "0": "0.7.0",
                         "6": "2.3.1",
                         "8": "2.3.1",
                         "10": "2.3.1"
                        }
                     }
                    As of April, 2023, an access token is no longer required to
                    call this API.
          headers: {}
  /v1/binaries:
    post:
      summary: Compile source code
      deprecated: false
      description: Compile source code into a binary for a device
      tags: []
      parameters: []
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "file": "string",
                "platform_id": 0,
                "product_id": "string",
                "build_target_version": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/binaries
                    HTTP/1.1 200 OK
                    {
                      "ok": true,
                      "binary_id": "5734a5d4a71c2601243809e6",
                      "binary_url": "/v1/binaries/5734a5d4a71c2601243809e6",
                      "build_target_version": "1.5.1",
                      "expires_at": "2016-05-13T15:48:27.997Z",
                      "sizeInfo": "   text\t   data\t    bss\t    dec\t    hex\tfilename\n  91780\t    952\t   9368\t 102100\t  18ed4\t"
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/metrics/online:
    get:
      summary: Get online devices metrics
      deprecated: false
      description: >-
        Reports the number of devices online in this product. 


        Each time bucket contains: 


        - count: the number of devices with an active cloud connection. 


        Devices that recently went offline (due to being powered off or losing
        network connectivity) will be counted as online until the device misses
        sending a keep-alive message to the cloud. This is typically 25 seconds
        for Wi-Fi networks and 23 minutes for cellular networks. 


        Can be filtered to include only devices with a certain firmware version,
        Device OS version or in a certain group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: >-
            DateTime to start on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.051Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: >-
            DateTime to end on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.051Z'
          schema:
            type: string
        - name: bucket_size
          in: query
          description: >-
            Number of seconds for each bucket, defaults to 900 (15 minutes).
            Must be greater than 15.
          required: false
          example: '0'
          schema:
            type: string
        - name: product_fw
          in: query
          description: Filter for this product firmware version.
          required: false
          example: '0'
          schema:
            type: string
        - name: device_os_version
          in: query
          description: Filter for this Device OS version.
          required: false
          example: string
          schema:
            type: string
        - name: device_group
          in: query
          description: Filter for this device group.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/12345/metrics/online
                    HTTP/1.1 200 OK
                    {
                      "online": [
                        {
                          "time": "2024-04-01T00:00:00.000Z",
                          "count": 37
                        },
                        {
                          "time": "2024-04-01T01:00:00.000Z",
                          "count": 42
                        },
                        ...
                      ]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/metrics/events:
    get:
      summary: Get event traffic health metrics
      deprecated: false
      description: >-
        Reports each time a device publishes an event in this product. 


        Each time bucket contains counts of: 


        - received: the cloud received an event from a device. 


        Can be filtered to include only events from devices with a certain
        firmware version, Device OS version or in a certain group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: >-
            DateTime to start on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.053Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: >-
            DateTime to end on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.053Z'
          schema:
            type: string
        - name: bucket_size
          in: query
          description: >-
            Number of seconds for each bucket, defaults to 900 (15 minutes).
            Must be greater than 15.
          required: false
          example: '0'
          schema:
            type: string
        - name: product_fw
          in: query
          description: Filter for this product firmware version.
          required: false
          example: '0'
          schema:
            type: string
        - name: device_os_version
          in: query
          description: Filter for this Device OS version.
          required: false
          example: string
          schema:
            type: string
        - name: device_group
          in: query
          description: Filter for this device group.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/12345/metrics/events
                    HTTP/1.1 200 OK
                    {
                      "events": [
                        {
                          "time": "2024-04-01T00:00:00.000Z",
                          "received": 256
                        },
                        {
                          "time": "2024-04-01T01:00:00.000Z",
                          "received": 1024
                        },
                        ...
                      ]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/metrics/integration:
    get:
      summary: Get integration traffic health metrics
      deprecated: false
      description: >-
        Reports outbound integration requests that are sent on behalf of this
        product fleet and the outcome. 


        Each time bucket contains counts of (keys with a value of 0 will be
        omitted): 


        - success: the integration request was accepted by the destination
        service (2xx response code).

        - failure: the integration request was rejected by the destination
        service (network error, 4xx or 5xx response code) after 3 attempts.

        - sleep (skipped): the integration request was not attempted because
        there have been too many previous failures in rapid succession. 


        Can be filtered to include only integrations triggered by devices with a
        certain firmware version, Device OS version or in a certain group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: >-
            DateTime to start on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.054Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: >-
            DateTime to end on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.054Z'
          schema:
            type: string
        - name: bucket_size
          in: query
          description: >-
            Number of seconds for each bucket, defaults to 900 (15 minutes).
            Must be greater than 15.
          required: false
          example: '0'
          schema:
            type: string
        - name: product_fw
          in: query
          description: Filter for this product firmware version.
          required: false
          example: '0'
          schema:
            type: string
        - name: device_os_version
          in: query
          description: Filter for this Device OS version.
          required: false
          example: string
          schema:
            type: string
        - name: device_group
          in: query
          description: Filter for this device group.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/12345/metrics/integration
                    HTTP/1.1 200 OK
                    {
                      "integrations": [
                        {
                          "time": "2024-04-01T00:00:00.000Z",
                          "success": 40,
                          "failure": 3,
                          "sleep": 1
                        },
                        {
                          "time": "2024-04-01T01:00:00.000Z",
                          "success": 40,
                          "failure": 3,
                          "sleep": 1
                        },
                        ...
                      ]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/metrics/functions:
    get:
      summary: Get cloud function call health metrics
      deprecated: false
      description: >-
        Reports each time a Particle.function() in firmware is called on a
        device in this product and the outcome. 


        Each time bucket contains counts of (keys with a value of 0 will be
        omitted): 


        - success: the target device successfully received and responded to the
        function call.

        - failure: the target device was unable to process the function call, or
        was unreachable by the cloud.

        - offline: the function call attempt was skipped because the device was
        not connected to the cloud at the time the call was made. 


        Can be filtered to include only function calls for devices with a
        certain firmware version, Device OS version or in a certain group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: >-
            DateTime to start on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.064Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: >-
            DateTime to end on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.064Z'
          schema:
            type: string
        - name: bucket_size
          in: query
          description: >-
            Number of seconds for each bucket, defaults to 900 (15 minutes).
            Must be greater than 15.
          required: false
          example: '0'
          schema:
            type: string
        - name: product_fw
          in: query
          description: Filter for this product firmware version.
          required: false
          example: '0'
          schema:
            type: string
        - name: device_os_version
          in: query
          description: Filter for this Device OS version.
          required: false
          example: string
          schema:
            type: string
        - name: device_group
          in: query
          description: Filter for this device group.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/12345/metrics/functions
                    HTTP/1.1 200 OK
                    {
                      "functions": [
                        {
                          "time": "2024-04-01T00:00:00.000Z",
                          "success": 10,
                          "failure": 3,
                          "offline": 42
                        },
                        {
                          "time": "2024-04-01T01:00:00.000Z",
                          "success": 10,
                          "failure": 3,
                          "offline": 42
                        },
                        ...
                      ]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/metrics/variables:
    get:
      summary: Get cloud variable request health metrics
      deprecated: false
      description: >-
        Reports each time a Particle.variable() in firmware is read on a device
        in this product and the outcome. 


        Each time bucket contains counts of (keys with a value of 0 will be
        omitted): 


        - success: the target device successfully received and responded to the
        variable request.

        - failure: the target device was unable to process the variable request,
        or was unreachable by the cloud.

        - offline: the variable request was skipped because the device was not
        connected to the cloud at the time the call was made. 


        Can be filtered to include only variable requests for devices with a
        certain firmware version, Device OS version or in a certain group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: start_date
          in: query
          description: >-
            DateTime to start on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.066Z'
          schema:
            type: string
        - name: end_date
          in: query
          description: >-
            DateTime to end on (inclusive), defaults to the current time. Date
            in ISO8601 format.
          required: false
          example: '2024-10-07T10:03:32.066Z'
          schema:
            type: string
        - name: bucket_size
          in: query
          description: >-
            Number of seconds for each bucket, defaults to 900 (15 minutes).
            Must be greater than 15.
          required: false
          example: '0'
          schema:
            type: string
        - name: product_fw
          in: query
          description: Filter for this product firmware version.
          required: false
          example: '0'
          schema:
            type: string
        - name: device_os_version
          in: query
          description: Filter for this Device OS version.
          required: false
          example: string
          schema:
            type: string
        - name: device_group
          in: query
          description: Filter for this device group.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/12345/metrics/variables
                    HTTP/1.1 200 OK
                    {
                      "variables": [
                        {
                          "time": "2024-04-01T00:00:00.000Z",
                          "success": 10,
                          "failure": 3,
                          "offline": 42
                        },
                        {
                          "time": "2024-04-01T01:00:00.000Z",
                          "success": 10,
                          "failure": 3,
                          "offline": 42
                        },
                        ...
                      ]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/groups/{groupName}:
    get:
      summary: Get device group
      deprecated: false
      description: >-
        Retrieve full info on a specific product group, including its device
        count.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: groupName
          in: path
          description: The group name to fetch
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/:productIdOrSlug/groups/group_a
                    HTTP/1.1 200 OK
                    {
                      "group": {
                        "name":"group_a",
                        "description":"first group A",
                        "color":"#e74c3c",
                        "fw_version":1,
                        "device_count":3
                      }
                    }
          headers: {}
    put:
      summary: Edit device group
      deprecated: false
      description: >-
        Edit attributes of a specific device group. You must pass one of name,
        color, or description.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: groupName
          in: path
          description: The group name to edit
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "color": "string",
                "description": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/products/:productIdOrSlug/groups/group_a
                    HTTP/1.1 200 OK
                    {
                      "group": {
                        "name":"double_agent",
                        "description":"group description",
                        "color":"#e74c3c",
                        "fw_version":1,
                        "device_count":3
                      }
                    }
          headers: {}
    delete:
      summary: Delete device group
      deprecated: false
      description: >-
        Delete device group. All devices that belong to this group will be
        removed from the deleted group.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: groupName
          in: path
          description: The group name to delete
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/products/:productIdOrSlug/groups/group_a
                    HTTP/1.1 204 NO CONTENT
          headers: {}
  /v1/products/{productIdOrSlug}/groups:
    get:
      summary: List device groups
      deprecated: false
      description: >-
        List the group objects that exist in the product. Optionally, filter by
        group name (partial match).
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: name
          in: query
          description: String to filter group names by. Partial string matching.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/:productIdOrSlug/groups?name=gr
                    HTTP/1.1 200 OK
                    {
                      "groups": [
                        {
                          "name":"group_a",
                          "description":"the A group",
                          "fw_version":3,
                          "color":"#34495e"
                        },
                        {
                          "name":"group_b",
                          "description": "the B group",
                          "color":"#34495e"
                        }
                      ]
                    }
          headers: {}
    post:
      summary: Create device group
      deprecated: false
      description: Create a new device group withinin a product
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "color": "string",
                "description": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/products/:productIdOrSlug/groups
                    HTTP/1.1 201 Created
                    {
                      "group": {
                        "name": "group_a",
                        "description": "the A group",
                        "color": "#34495e"
                      }
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/impact:
    get:
      summary: Impact of taking action
      deprecated: false
      description: >-
        Understand the number of devices that would receive an over-the-air
        update as a result of taking an action related to device groups. 


        Currently, this endpoint supports understanding the impact of
        releasing/unreleasing firmware to one or more device groups. Pass
        edit_groups_for_firmware as the action parameter when calling the
        endpoint.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/impact\nHTTP/1.1 200 OK\n{\n   devices: {\n     firmware_update: {\n       total: 123,\n       by_version: [\n         {\n\t          version: 1,\n\t\t\t  total: 25\n         },\n         {\n\t\t       ...\n         }\n       ]\n     }\n   }\n}"
          headers: {}
  /v1/integrations:
    get:
      summary: List integrations
      deprecated: false
      description: >-
        List all integrations. Pay special attention to the integration_type
        attribute of each integration, which will let you know whether the
        integration is a Webhook, an Azure IoT Hub integration, or a Google
        Cloud Platform integration. 


        If you would like to only list webhooks (integrations with type:
        'Webhook'), you can use a slightly different endpoint: 


        GET /v1/webhooks
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/integrations\nHTTP/1.1 200 OK\n[\n\t{\n\t\t\"id\":\"12345\",\n\t\t\"event\":\"eventName\",\n\t\t\"created_at\":\"2017-03-14T17:57:46.316Z\",\n\t\t\"integration_type\":\"Webhook\",\n\t\t\"url\":\"https://weather.com\",\n\t\t\"requestType\":\"POST\"\n\t}\n]"
          headers: {}
    post:
      summary: Enable Google Maps integration
      deprecated: false
      description: >-
        Enable an integration with Google Maps. For more details, check out the
        tutorial.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "integration_type": "string",
                "event": "string",
                "name": "string",
                "api_key": "string",
                "deviceID": "string",
                "disabled": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "POST /v1/integrations\nHTTP/1.1 201 Created\n{\n\t\"id\":\"1\",\n\t\"event\":\"foo\",\n  \"name': \"foo for Google Maps\",\n\t\"created_at\":\"2017-03-16T19:54:54.570Z\",\n\t\"integration_type\":\"GoogleMaps\",\n\t\"ok\":true,\n\t\"api_key\": \"123abc\",\n\t\"integrationUrl\": \"https://api.particle.io/v1/integrations/1\"\n}"
          headers: {}
  /v1/integrations/{integrationId}:
    get:
      summary: Get integration
      deprecated: false
      description: >-
        Get a single integration. Pay special attention to the integration_type
        attribute of each integration, which will let you know whether the
        integration is a Webhook, an Azure IoT Hub integration, a Google Cloud
        Platform integration, or a Google Maps integration.
      tags: []
      parameters:
        - name: integrationId
          in: path
          description: The ID of the desired integration
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/integrations/12345\nHTTP/1.1 200 OK\n{\n\t\"integration\": {\n\t\t\"id\":\"12345\",\n\t\t\"event\":\"eventName\",\n\t    \"name\": \"Check weather\",\n\t\t\"created_at\":\"2017-03-14T17:57:46.316Z\",\n\t\t\"logs\": [...],\n\t\t\"integration_type\":\"Webhook\",\n\t\t\"url\":\"https://weather.com\",\n\t\t\"requestType\":\"POST\"\n\t}\n}"
          headers: {}
    put:
      summary: Edit Google Maps Integration
      deprecated: false
      description: >-
        Edit a Google Maps integration. Subsequent triggering of this
        integration will be sent with the new attributes. 


        The configuration replaces the entire previous webhook configuration. It
        does not merge in changes.
      tags: []
      parameters:
        - name: integrationId
          in: path
          description: The ID of the desired integration
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "event": "string",
                "name": "string",
                "deviceID": "string",
                "api_key": "string",
                "disabled": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "PUT /v1/integrations/12345\nHTTP/1.1 200 OK\n{\n\t\"integration\": {\n\t\t\"id\":\"12345\",\n\t\t\"event\":\"foo\",\n\t\t\"created_at\":\"2017-03-14T17:57:46.316Z\",\n\t\t\"integration_type\":\"GoogleMaps\",\n\t    \"name\": \"Send to Google Maps\",\n\t\t\"api_key\": \"123abc\"\n\t}\n}"
          headers: {}
    delete:
      summary: Delete an integration
      deprecated: false
      description: >-
        Delete an integration and immediate stop it from triggering. The
        integration can belong to a user or to a product.
      tags: []
      parameters:
        - name: integrationId
          in: path
          description: The ID of the desired integration
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug (only for product webhooks)
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/webhooks
                    HTTP/1.1 204 No Content
          headers: {}
  /v1/integrations/{integrationId}/test:
    post:
      summary: Test an integration
      deprecated: false
      description: >-
        Send a test event that triggers the integration. Helps build confidence
        that an integration is configured properly.
      tags: []
      parameters:
        - name: integrationId
          in: path
          description: The ID of the desired integration
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "data": "string",
                "device_id": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "POST /v1/integrations/1234/test\nHTTP/1.1 200 OK\n{\n\t  pass: true,\n\t  data: null\n}"
          headers: {}
  /v1/users/ledgers/{ledgerName}/instances/{scopeValue}/versions:
    get:
      summary: List ledger instance versions
      deprecated: false
      description: Lists all ledger instance versions.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: scopeValue
          in: path
          description: Scope value
          required: true
          example: string
          schema:
            type: string
        - name: replaced_before
          in: query
          description: List only versions replaced before this date
          required: false
          example: string
          schema:
            type: string
        - name: replaced_after
          in: query
          description: List only versions replaced after this date
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    /v1/users/ledgers/:ledgerName/instances/:scopeValue/versions

                    HTTP/1.1 200 OK

                    {
                      "versions": [
                        {
                          "name": "prodledger",
                          "scope": {
                            "type": "Product",
                            "value": "123",
                            "name": "My Product"
                          },
                          "size_bytes": 1234,
                          "data": {},
                          "updated_at": "2023-01-01T00:00:00.000Z",
                          "created_at": "2023-01-01T00:00:00.000Z",
                        }, {
                          "name": "prodledger",
                          "scope": {
                            "type": "Product",
                            "value": "123",
                          },
                          "size_bytes": 1234,
                          "data": {},
                          "updated_at": "2023-01-01T00:00:00.000Z",
                          "created_at": "2023-01-01T00:00:00.000Z",
                          "replaced_at": "2023-11-28T15:02:04.799Z"
                        }
                      ],
                      "meta": {
                        "has_more": false
                       }
                    }
          headers: {}
  /v1/users/ledgers:
    get:
      summary: List ledger definitions
      deprecated: false
      description: Lists all ledger definitions belonging to the Sandbox or organization.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          example: '0'
          schema:
            type: string
        - name: perPage
          in: query
          description: Number of definitions per page
          required: false
          example: '0'
          schema:
            type: string
        - name: archived
          in: query
          description: Filter for archived definitions
          required: false
          example: 'false'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/ledgers
                    HTTP/1.1 200 OK
                    {
                      "ledgers": [
                        {
                          "scope": "Owner",
                          "name": "My Ledger",
                          "description": "My Ledger Description",
                          "direction": "Downstream",
                          "updated_at": "2023-01-01T00:00:00.000Z",
                          "created_at": "2023-01-01T00:00:00.000Z",
                          "archived_at": "2023-01-01T00:00:00.000Z" | null
                        }
                      ],
                      "meta": {
                        "page": 1,
                        "per_page": 100,
                        "total_pages": 1,
                        "total": 1
                       }
                    }
          headers: {}
    post:
      summary: Create a new ledger definition
      deprecated: false
      description: Creates a ledger definition.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "definition": {
                  "key": "value"
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/users/ledgers
                    HTTP/1.1 201 Created
                    {
                      "ledger": {
                        "scope": "Owner",
                        "name": "My Ledger",
                        "description": "My Ledger Description",
                        "direction": "Downstream",
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                        "archived_at": "2023-01-01T00:00:00.000Z" | null
                      }
                    }
          headers: {}
  /v1/users/ledgers/{ledgerName}:
    get:
      summary: Get ledger definition
      deprecated: false
      description: Returns the specified ledger definition.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/ledgers/:ledgerName
                    HTTP/1.1 200 OK
                    {
                      "ledger": {
                        "scope": "Owner",
                        "name": "My Ledger",
                        "description": "My Ledger Description",
                        "direction": "Downstream",
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                        "archived_at": "2023-01-01T00:00:00.000Z" | null
                      }
                    }
          headers: {}
    put:
      summary: Update ledger definition
      deprecated: false
      description: Updates the ledger definition.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "definition": {
                  "key": "value"
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/users/ledgers/:ledgerName
                    HTTP/1.1 201 Created
                    {
                      "ledger": {
                        "scope": "Owner",
                        "name": "My Ledger",
                        "description": "My Ledger Description",
                        "direction": "Downstream",
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                        "archived_at": "2023-01-01T00:00:00.000Z" | null
                      }
                    }
          headers: {}
    delete:
      summary: Archive a ledger definition
      deprecated: false
      description: Archives a ledger definition.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/users/ledgers/:ledgerName
                    HTTP/1.1 204 No content
          headers: {}
  /v1/users/ledgers/{ledgerName}/instances:
    get:
      summary: List ledger instances
      deprecated: false
      description: Lists all ledger instances.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          required: false
          example: '0'
          schema:
            type: string
        - name: perPage
          in: query
          description: Number of instances per page
          required: false
          example: '0'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/ledgers/:ledgerName/instances
                    HTTP/1.1 200 OK
                    {
                      "instances": [
                        {
                          "name": "prodledger",
                          "scope": {
                            "type": "Product",
                            "value": "123",
                            "name": "My Product"
                          },
                          "size_bytes": 1234,
                          "data": {},
                          "updated_at": "2023-01-01T00:00:00.000Z",
                          "created_at": "2023-01-01T00:00:00.000Z",
                        }, {
                          "name": "prodledger",
                          "scope": {
                            "type": "Product",
                            "value": "456",
                            "not_owned": true
                          },
                          "size_bytes": 1234,
                          "data": {},
                          "updated_at": "2023-01-01T00:00:00.000Z",
                          "created_at": "2023-01-01T00:00:00.000Z",
                        }
                      ],
                      "meta": {
                        "page": 1,
                        "per_page": 100,
                        "total_pages": 1,
                        "total": 1
                       }
                    }
          headers: {}
  /v1/users/ledgers/{ledgerName}/instances/{scopeValue}:
    get:
      summary: Get ledger instance
      deprecated: false
      description: Returns the specified ledger instance.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: scopeValue
          in: path
          description: Scope value
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/ledgers/:ledgerName/instances/:scopeValue
                    HTTP/1.1 200 OK
                    {
                      "instance": {
                        "scope": {
                          "type": "Product",
                          "value": "123",
                        },
                        "name": "prodledger",
                        "size_bytes": 1234,
                        "data": {},
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                      }
                    }
          headers: {}
    put:
      summary: Set the ledger instance data
      deprecated: false
      description: Sets the data of the specified ledger instance.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: scopeValue
          in: path
          description: Scope value
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "data": {
                  "key": "value"
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/users/ledgers/:ledgerName/instances/:scopeValue
                    HTTP/1.1 201 Created
                    {
                      "instance": {
                        "scope": {
                          "type": "Product",
                          "value": "123",
                        },
                        "name": "prodledger",
                        "size_bytes": 1234,
                        "data": {
                          "foo": "bar"
                        },
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                      }
                    }
          headers: {}
    delete:
      summary: Delete ledger instance
      deprecated: false
      description: Deletes the specified ledger instance.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: scopeValue
          in: path
          description: Scope value
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/users/ledgers/:ledgerName/instances/:scopeValue
                    HTTP/1.1 204 No content
          headers: {}
  /v1/users/ledgers/{ledgerName}/instances/{scopeValue}/versions/{version}:
    get:
      summary: Get ledger instance version
      deprecated: false
      description: Returns the specified version of a ledger instance.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: ledgerName
          in: path
          description: Ledger name
          required: true
          example: string
          schema:
            type: string
        - name: scopeValue
          in: path
          description: Scope value
          required: true
          example: string
          schema:
            type: string
        - name: version
          in: path
          description: Version ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    /v1/users/ledgers/:ledgerName/instances/:scopeValue/versions/:version

                    HTTP/1.1 200 OK

                    {
                      "instance": {
                        "scope": {
                          "type": "Product",
                          "value": "123",
                        },
                        "name": "prodledger",
                        "size_bytes": 1234,
                        "data": {},
                        "updated_at": "2023-01-01T00:00:00.000Z",
                        "created_at": "2023-01-01T00:00:00.000Z",
                      }
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/fleet_locations:
    get:
      summary: Query fleet-wide locations for devices within a product
      deprecated: false
      description: >-
        Get the latest location data for all the devices in a product to get a
        fleet-wide summary of device location.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: device_id
          in: query
          description: Device ID prefix to include in the query
          required: false
          example: string
          schema:
            type: string
        - name: device_name
          in: query
          description: Device name prefix to include in the query
          required: false
          example: string
          schema:
            type: string
        - name: groups
          in: query
          description: Array of group names to include in the query
          required: false
          example: string,string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET https://api.particle.io/v1/products/1234/fleet_locations
                    HTTP/1.1 200 OK
                    {
                      "locations": [{
                        "device_id": "1234567890abcdef",
                        "product_id": 343,
                        "device_name" : "deploy-truck32",
                        "gps_lock": true,
                        "last_heard": "2020-12-07T21:07:12Z",
                        "groups": ["us-east", "trucks"],
                        "timestamps": [
                          "2020-12-07T21:07:12Z",
                        ],
                        "geometry": {
                          "type": "Point",
                          "coordinates": [
                            34.518699645996094,
                            31.504855323809403
                          ]
                        }
                      }, {
                        "device_id": "deadbeef123456",
                        "product_id": 343,
                        "groups": ["us-east"],
                        "device_name": "service-truck11",
                        "timestamp": "2020-12-07T21:07:12Z",
                        "gps_lock": true,
                        "last_heard": "2020-12-07T21:07:12Z",
                        "geometry": {
                          "type": "Point",
                          "coordinates": [
                            33.548699645996094,
                            30.804855323809403
                          ]
                        },
                      }]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/locations:
    get:
      summary: Query location for devices within a product
      deprecated: false
      description: >-
        Get latest or historical location data for devices. Date range and
        bounding box can be specified to narrow the query.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: date_range
          in: query
          description: >-
            Start and end date in ISO8601 format, separated by comma, to query.
            Omitting date_range will return last known location.
          required: false
          example: string
          schema:
            type: string
        - name: rect_bl
          in: query
          description: >-
            Bottom left of the rectangular bounding box to query. Latitude and
            longitude separated by comma.
          required: false
          example: string
          schema:
            type: string
        - name: rect_tr
          in: query
          description: >-
            Top right of the rectangular bounding box to query. Latitude and
            longitude separated by comma.
          required: false
          example: string
          schema:
            type: string
        - name: device_id
          in: query
          description: Device ID prefix to include in the query
          required: false
          example: string
          schema:
            type: string
        - name: device_name
          in: query
          description: Device name prefix to include in the query
          required: false
          example: string
          schema:
            type: string
        - name: groups
          in: query
          description: Array of group names to include in the query
          required: false
          example: string,string
          schema:
            type: string
        - name: page
          in: query
          description: Page of results to display. Defaults to 1
          required: false
          example: '0'
          schema:
            type: string
        - name: per_page
          in: query
          description: Number of results per page. Defaults to 20. Maximum of 100
          required: false
          example: '0'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET https://api.particle.io/v1/products/1234/locations
                    HTTP/1.1 200 OK
                    {
                      "locations": [{
                        "device_id": "1234567890abcdef",
                        "product_id": 343,
                        "device_name" : "service-truck7",
                        "groups": ["us-east", "trucks"],
                        "gps_lock": true,
                        "last_heard": "2020-12-05T20:06:12Z",
                        "timestamps": [
                          "2020-12-05T20:03:40Z",
                          "2020-12-05T20:04:23Z",
                          "2020-12-05T20:05:44Z",
                          "2020-12-05T20:06:12Z",
                        ],
                        "online": false,
                        "geometry": {
                          "type": "LineString",
                          "coordinates": [[
                            34.518699645996094,
                            31.504855323809403
                          ],[
                            34.528699645996094,
                            31.604855323809403
                          ],[
                            34.538699645996094,
                            31.704855323809403
                          ],[
                            34.548699645996094,
                            31.804855323809403
                          ]]
                        }
                      }, {
                        "device_id": "deadbeef123456",
                        "product_id": 343,
                        "device_name": "service-truck11",
                        "groups": ["us-east"],
                        "gps_lock": true,
                        "last_heard": "2020-12-05T20:06:12Z",
                        "timestamps": [
                          "2020-12-05T20:04:23Z",
                          "2020-12-05T20:05:44Z",
                          "2020-12-05T20:06:12Z",
                        ],
                        "online": true,
                        "geometry": {
                          "type": "LineString",
                          "coordinates": [[
                            33.518699645996094,
                            30.504855323809403
                          ], [
                            33.528699645996094,
                            30.604855323809403
                          ], [
                            33.538699645996094,
                            30.704855323809403
                          ]]
                        },
                      }],
                      "meta": {
                        "page" : 1,
                        "per_page" : 20,
                        "total_pages" : 5,
                        "devices_found" : 100,
                      }
                    }
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET https://api.particle.io/v1/products/1234/locations
                    HTTP/1.1 200 OK
                    {
                      "locations": [{
                        "device_id": "1234567890abcdef",
                        "product_id": 343,
                        "device_name" : "deploy-truck32",
                        "gps_lock": true,
                        "last_heard": "2020-12-07T21:07:12Z",
                        "groups": ["us-east", "trucks"],
                        "timestamps": [
                          "2020-12-07T21:07:12Z",
                        ],
                        "geometry": {
                          "type": "Point",
                          "coordinates": [
                            34.518699645996094,
                            31.504855323809403
                          ]
                        }
                      }, {
                        "device_id": "deadbeef123456",
                        "product_id": 343,
                        "groups": ["us-east"],
                        "device_name": "service-truck11",
                        "timestamp": "2020-12-07T21:07:12Z",
                        "gps_lock": true,
                        "last_heard": "2020-12-07T21:07:12Z",
                        "geometry": {
                          "type": "Point",
                          "coordinates": [
                            33.548699645996094,
                            30.804855323809403
                          ]
                        },
                      }],
                      "meta": {
                        "page" : 1,
                        "total_pages" : 1,
                        "per_page" : 20,
                        "devices_found" : 2,
                      }
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/locations/{deviceId}:
    get:
      summary: Query location for one device within a product
      deprecated: false
      description: >-
        Get last known or historical location data for one device. Date range
        and bounding box can be specified to narrow down the query. Properties
        and custom data will be returned by default.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug.
          required: true
          example: string
          schema:
            type: string
        - name: deviceId
          in: path
          description: Device ID
          required: true
          example: string
          schema:
            type: string
        - name: date_range
          in: query
          description: >-
            Start and end date in ISO8601 format, separated by comma, to query.
            Omitting date_range will return last known location.
          required: false
          example: string
          schema:
            type: string
        - name: rect_bl
          in: query
          description: >-
            Bottom left of the rectangular bounding box to query. Latitude and
            longitude separated by comma.
          required: false
          example: string
          schema:
            type: string
        - name: rect_tr
          in: query
          description: >-
            Top right of the rectangular bounding box to query. Latitude and
            longitude separated by comma.
          required: false
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    https://api.particle.io/v1/products/1234/locations/123456

                    HTTP/1.1 200 OK

                    {
                      "location": {
                        "device_id": "1234567890abcdef",
                        "device_name" : "ice-cream-truck3",
                        "product_id": 343,
                        "gps_lock" : true,
                        "last_heard" : "2020-12-05T20:06:120Z",
                        "groups": ["us-east", "truck"],
                        "timestamps": [
                          "2020-12-05T20:03:40Z",
                          "2020-12-05T20:04:23Z",
                          "2020-12-05T20:05:44Z",
                          "2020-12-05T20:06:120Z"
                        ],
                        "online": true,
                        "geometry": {
                          "type": "LineString",
                          "coordinates": [[
                            34.518699645996094,
                            31.504855323809403
                          ],[
                            34.528699645996094,
                            31.604855323809403
                          ],[
                            34.538699645996094,
                            31.704855323809403
                          ],[
                            34.548699645996094,
                            31.804855323809403
                          ]]
                        },
                        "properties": [{
                            "hd" : 36.6,
                            "acc_h": 5.0,
                            "speed": 13.5,
                            "temp": 77.4
                        },{
                            "hd" : 37.6,
                            "acc_h": 6.0,
                            "speed": 13.5,
                            "temp": 69.4
                        },{
                            "hd" : 41.6,
                            "acc_h": 11.8,
                            "speed": 16.5,
                            "temp": 75.4
                        },{
                            "hd" : 42.6,
                            "acc_h": 7.9,
                            "speed": 15.5,
                            "temp": 78.4
                        }]
                      },
                      "meta": {}
                    }
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET https://api.particle.io/v1/products/1234/locations/123456\nHTTP/1.1 200 OK\n{\n  \"location\": {\n    \"device_id\": \"1234567890abcdef\",\n    \"device_name\" : \"ice-cream-truck3\",\n    \"product_id\": 343,\n    \"groups\": [\"us-east\", \"truck\"],\n    \"gps_lock\" : true,\n    \"last_heard\" : \"2020-12-05T20:06:120Z\",\n    \"timestamps\": [\"2020-12-05T20:06:120Z\"],\n    \"geometry\": {\n      \"type\": \"Point\",\n      \"coordinates\": [\n     \t34.548699645996094,\n        31.804855323809403\n      ]\n    },\n   \"properties\": [{\n        \"hd\" : 36.6,\n        \"acc_h\": 5.0,\n        \"speed\": 13.5,\n        \"temp\": 77.4\n    }]\n  },\n  \"meta\": {}\n}"
          headers: {}
  /v1/users/logic/functions/{logicFunctionId}/stats:
    get:
      summary: Get logic function stats
      deprecated: false
      description: Returns the specified logic function stats.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/logic/functions/:logicFunctionId/stats
                    HTTP/1.1 200 OK
                    {
                       "logic_function_stats": [
                         {
                           "date": "20231106",
                           "success": 175,
                           "failure": 168,
                           "timeout": 0
                         }
                       ]
                    }
          headers: {}
  /v1/users/logic/functions:
    get:
      summary: List logic functions
      deprecated: false
      description: >-
        Lists all logic functions belonging to the specified Sandbox or
        organization.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: today_stats
          in: query
          description: Include today's stats
          required: false
          example: 'false'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/logic/functions?today_stats=true
                    HTTP/1.1 200 OK
                    {
                      "logic_functions": [
                        {
                          "id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                          "owner_id": "user:deadbeef",
                          "version": 4,
                          "enabled": false,
                          "name": "My Logic Function",
                          "description": "",
                          "template_slug": null,
                          "source": {
                            "type": "JavaScript",
                            "code": "export default function main() {}"
                          },
                          "created_at": "2023-08-08T18:37:20.355177Z",
                          "updated_at": "2023-10-25T21:10:44.240143Z",
                          "created_by": "user:deadbeef",
                          "updated_by": "user:deadbeef",
                          "logic_triggers": [
                            {
                              "id": "08c6cfc4-e7d6-4b75-aa9e-8690d5c7aa5d",
                              "type": "Scheduled",
                              "logic_function_id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                              "enabled": true,
                              "version": 4,
                              "cron": "0 0 0 0 0",
                              "start_at": "2023-10-25T21:10:44.268743Z",
                              "end_at": null,
                              "last_scheduled_at": "2023-10-25T21:15:00Z",
                              "next_unscheduled_at": "2023-10-25T21:20:00Z"
                            }
                          ],
                          "today_stats": {
                            "success": 0,
                            "failure": 0,
                            "timeout": 0
                          }
                        }
                      ]
                    }
          headers: {}
    post:
      summary: Create a new logic function
      deprecated: false
      description: Creates a logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "logic_function": {
                  "key": "value"
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/users/logic/functions
                    HTTP/1.1 201 Created
                    {
                      "logic_function": {
                        "id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                        "owner_id": "user:deadbeef",
                        "version": 4,
                        "enabled": false,
                        "name": "My Logic Function",
                        "description": "",
                        "template_slug": null,
                        "source": {
                          "type": "JavaScript",
                          "code": "export default function main() {}"
                        },
                        "created_at": "2023-08-08T18:37:20.355177Z",
                        "updated_at": "2023-10-25T21:10:44.240143Z",
                        "created_by": "user:deadbeef",
                        "updated_by": "user:deadbeef",
                        "logic_triggers": [
                          {
                            "id": "08c6cfc4-e7d6-4b75-aa9e-8690d5c7aa5d",
                            "type": "Scheduled",
                            "logic_function_id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                            "enabled": true,
                            "version": 4,
                            "cron": "0 0 0 0 0",
                            "start_at": "2023-10-25T21:10:44.268743Z",
                            "end_at": null,
                            "last_scheduled_at": "2023-10-25T21:15:00Z",
                            "next_unscheduled_at": "2023-10-25T21:20:00Z"
                          }
                        ]
                      }
                    }
          headers: {}
  /v1/users/logic/functions/{logicFunctionId}:
    get:
      summary: Get logic function
      deprecated: false
      description: Returns the specified logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/logic/functions/:logicFunctionId
                    HTTP/1.1 200 OK
                    {
                      "logic_function": {
                        "id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                        "owner_id": "user:deadbeef",
                        "version": 4,
                        "enabled": false,
                        "name": "My Logic Function",
                        "description": "",
                        "template_slug": null,
                        "source": {
                          "type": "JavaScript",
                          "code": "export default function main() {}"
                        },
                        "created_at": "2023-08-08T18:37:20.355177Z",
                        "updated_at": "2023-10-25T21:10:44.240143Z",
                        "created_by": "user:deadbeef",
                        "updated_by": "user:deadbeef",
                        "logic_triggers": [
                          {
                            "id": "08c6cfc4-e7d6-4b75-aa9e-8690d5c7aa5d",
                            "type": "Scheduled",
                            "logic_function_id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                            "enabled": true,
                            "version": 4,
                            "cron": "0 0 0 0 0",
                            "start_at": "2023-10-25T21:10:44.268743Z",
                            "end_at": null,
                            "last_scheduled_at": "2023-10-25T21:15:00Z",
                            "next_unscheduled_at": "2023-10-25T21:20:00Z"
                          }
                        ]
                      }
                    }
          headers: {}
    put:
      summary: Update logic function
      deprecated: false
      description: Updates the logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "logic_function": {
                  "key": "value"
                }
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/users/logic/functions/:logicFunctionId
                    HTTP/1.1 201 Created
                    {
                      "logic_function": {
                        "id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                        "owner_id": "user:deadbeef",
                        "version": 4,
                        "enabled": false,
                        "name": "My Logic Function",
                        "description": "",
                        "template_slug": null,
                        "source": {
                          "type": "JavaScript",
                          "code": "export default function main() {}"
                        },
                        "created_at": "2023-08-08T18:37:20.355177Z",
                        "updated_at": "2023-10-25T21:10:44.240143Z",
                        "created_by": "user:deadbeef",
                        "updated_by": "user:deadbeef",
                        "logic_triggers": [
                          {
                            "id": "08c6cfc4-e7d6-4b75-aa9e-8690d5c7aa5d",
                            "type": "Scheduled",
                            "logic_function_id": "79c1c82b-6dc5-49a1-b678-559b3e53a44d",
                            "enabled": true,
                            "version": 4,
                            "cron": "0 0 0 0 0",
                            "start_at": "2023-10-25T21:10:44.268743Z",
                            "end_at": null,
                            "last_scheduled_at": "2023-10-25T21:15:00Z",
                            "next_unscheduled_at": "2023-10-25T21:20:00Z"
                          }
                        ],
                        "today_stats": {
                          "success": 0,
                          "failure": 0,
                          "timeout": 0
                        }
                      }
                    }
          headers: {}
    delete:
      summary: Delete logic function
      deprecated: false
      description: Deletes the specified logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/users/logic/functions/:logicFunctionId
                    HTTP/1.1 204 No content
          headers: {}
  /v1/users/logic/functions/{logicFunctionId}/runs:
    get:
      summary: List logic functions runs
      deprecated: false
      description: Lists all runs for the specified logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/users/logic/functions/:logicFunctionId/runs
                    HTTP/1.1 200 OK
                    {
                      "logic_runs": [
                        {
                          "id": "f1540276-63df-44a7-9f1b-b0dfec9640ea",
                          "owner_id": "user:deadbeef",
                          "logic_function_id": "f3635877-3106-49c0-84ea-28781d9371fe",
                          "logic_trigger_type": "Scheduled",
                          "logic_trigger_id": "899944c2-ff3f-4f6a-a135-c4bc624ec382",
                          "status": "Success",
                          "started_at": "2023-11-07T18:20:59.462214Z",
                          "finished_at": "2023-11-07T18:20:59.581605Z",
                          "log_filename": "user:deadbeef/function-f3635877-3106-49c0-84ea-28781d9371fe/Scheduled-899944c2-ff3f-4f6a-a135-c4bc624ec382/1699381259462:1699381259581_1f32a920-7690-41c0-9585-0bbcab7846e9.json"
                        }
                      ]
                    }
          headers: {}
  /v1/users/logic/functions/{logicFunctionId}/runs/{logicRunId}:
    get:
      summary: Get logic function run
      deprecated: false
      description: Returns the specified logic function run.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
        - name: logicRunId
          in: path
          description: Logic run ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    /v1/users/logic/functions/:logicFunctionId/runs/:logicRunId

                    HTTP/1.1 200 OK

                    {
                      "logic_run": {
                        "id": "f1540276-63df-44a7-9f1b-b0dfec9640ea",
                        "owner_id": "users:deadbeef",
                        "logic_function_id": "f3635877-3106-49c0-84ea-28781d9371fe",
                        "logic_trigger_type": "Scheduled",
                        "logic_trigger_id": "899944c2-ff3f-4f6a-a135-c4bc624ec382",
                        "status": "Success",
                        "started_at": "2023-11-07T18:20:59.462214Z",
                        "finished_at": "2023-11-07T18:20:59.581605Z",
                        "log_filename": "users:deadbeef/function-f3635877-3106-49c0-84ea-28781d9371fe/Scheduled-899944c2-ff3f-4f6a-a135-c4bc624ec382/1699381259462:1699381259581_1f32a920-7690-41c0-9585-0bbcab7846e9.json"
                      }
                    }
          headers: {}
  /v1/users/logic/functions/{logicFunctionId}/runs/{logicRunId}/logs:
    get:
      summary: Get logic function run logs
      deprecated: false
      description: Returns the specified logic function run logs.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
        - name: logicFunctionId
          in: path
          description: Logic function ID
          required: true
          example: string
          schema:
            type: string
        - name: logicRunId
          in: path
          description: Logic run ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: >-
                    GET
                    /v1/users/logic/functions/:logicFunctionId/runs/:logicRunId/logs

                    HTTP/1.1 200 OK

                    {
                      "logic_run_logs": {
                        "logs": [
                          {
                            "level": "Info",
                            "timestamp": "2023-11-07T18:20:59.470Z",
                            "args": [
                              "Hello"
                            ]
                          }
                        ]
                      }
                    }
          headers: {}
  /v1/users/logic/execute:
    post:
      summary: Execute logic function
      deprecated: false
      description: Executes the provided logic function.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug. Organization endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "source": {
                  "key": "value",
                  "type": "string",
                  "code": "string"
                },
                "event": {
                  "key": "value",
                  "event_data": "string",
                  "device_id": "string",
                  "product_id": "string"
                },
                "api_username": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/users/logic/execute
                    HTTP/1.1 200 OK
                    {
                      "result": {
                        "status": "Success",
                        "logs": []
                      }
                    }
          headers: {}
  /v1/clients:
    get:
      summary: List clients
      deprecated: false
      description: >-
        Get a list of all existing OAuth clients, either owned by the
        authenticated user or clients associated with a product.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/clients\nHTTP/1.1 200 OK\n{\n\t\"ok\":true,\n\t\"clients\": [\n\t\t{\n\t\t\t\"name\":\"server\",\n\t\t\t\"type\":\"installed\",\n\t\t\t\"id\":\"server-999\"\n\t\t},\n\t\t{\n\t\t\t\"name\":\"Mobile App\",\n\t\t\t\"type\":\"installed\",\n\t\t\t\"id\":\"mobile-app-1234\"\n\t\t}\n\t]\n}"
          headers: {}
    post:
      summary: Create a client
      deprecated: false
      description: >-
        Create an OAuth client that represents an app. 


        Use type=installed for most web and mobile apps. If you want to have
        Particle users login to their account on Particle in order to give your
        app access to their devices, then you can go through the full OAuth
        authorization code grant flow using type=web. This is the same way you
        authorize it is similar to the way you give any app access to your
        Facebook or Twitter account. 


        Your client secret will never be displayed again! Save it in a safe
        place. 


        If you use type=web then you will also need to pass a redirect_uri
        parameter in the POST body. This is the URL where users will be
        redirected after telling Particle they are willing to give your app
        access to their devices. 


        The scopes provided only contain the object and action parts, skipping
        the domain which is being infered from the context. 


        If you are building a web or mobile application for your Particle
        product, you should use the product-specific endpoint for creating a
        client (POST /v1/products/:productIdOrSlug/clients). This will grant
        this client (and access tokens generated by this client) access to
        product-specific behaviors like calling functions and checking variables
        on product devices, creating customers, and generating customer scoped
        access tokens.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "type": "string",
                "redirect_uri": "string",
                "scope": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "POST /v1/clients\nHTTP/1.1 200 OK\n{\n\t\"ok\": true,\n\t\"client\": {\n\t\t\"name\": \"MyApp\",\n\t\t\"type\": \"installed\",\n\t\t\"id\": \"myapp-2146\",\n\t\t\"secret\": \"615c620d647b6e1dab13bef1695c120b0293c342\"\n\t}\n}"
          headers: {}
  /v1/clients/{clientId}:
    put:
      summary: Update a client
      deprecated: false
      description: Update the name or scope of an existing OAuth client.
      tags: []
      parameters:
        - name: clientId
          in: path
          description: The client ID to update
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "name": "string",
                "scope": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "PUT /v1/clients/client-123\nHTTP/1.1 200 OK\n{\n\t\"ok\": true,\n\t\"client\": {\n\t\t\"name\": \"My App 2\",\n\t\t\"type\": \"installed\",\n\t\t\"id\": \"myapp-2146\",\n\t\t\"secret\": \"615c620d647b6e1dab13bef1695c120b0293c342\"\n\t}\n}"
          headers: {}
    delete:
      summary: Delete a client
      deprecated: false
      description: Remove an OAuth client
      tags: []
      parameters:
        - name: clientId
          in: path
          description: The client ID to delete
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only.
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/clients/:clientId
                    HTTP/1.1 204 No Content
          headers: {}
  /v1/orgs:
    get:
      summary: List organizations
      deprecated: false
      description: List organizations the currently authenticated user has access to
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/orgs\nHTTP/1.1 200 OK\n{\n\t \"organizations\": [\n       {\n\t\t\t\"id\":\"9980222caf8bad191600019b\",\n\t\t\t\"slug\":\"particle\",\n\t\t\t\"name\": \"Particle\"\n\t\t},\n       ...\n  ]\n}"
          headers: {}
  /v1/orgs/{orgIdOrSlug}:
    get:
      summary: Retrieve an organization
      deprecated: false
      description: Retrieve details for an organization.
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/orgs/particle
                    HTTP/1.1 200 OK
                    {
                      "organization": {
                        "id": "9980222caf8bad191600019b",
                        "slug": "particle",
                        "name": "Particle"
                      }
                    }
          headers: {}
  /v1/orgs/{orgIdOrSlug}/products:
    get:
      summary: List organization products
      deprecated: false
      description: List products which belong the the organization
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Organization ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/orgs/particle/products
                    HTTP/1.1 200 OK
                    {
                      "products": [{
                        "id": 12345,
                        "platform_id": 10,
                        "name": "My Product",
                        "slug": "my-product",
                        "description": "My test product",
                        "org": "Particle",
                        "organization_id": "9980222caf8bad191600019b",
                        "groups": [
                          "one",
                          "two"
                        ],
                        "settings": {
                            "location": {},
                            "known_application": {
                                "opt_in": true
                            },
                            "quarantine": false
                        }
                      }]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/firmware/{version}:
    get:
      summary: Get product firmware
      deprecated: false
      description: Get a specific version of product firmware
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: version
          in: path
          description: Version number of firmware to retrieve
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/firmware/1\nHTTP/1.1 200 OK\n{\n\t\"_id\":\"58c09bc7df2b9a4d223d9c22\",\n\t\"version\":1,\n\t\"title\":\"My Firmware\",\n\t\"description\":\"Sample firmware description\",\n\t\"name\":\"firmware.bin\",\n\t\"size\":7952,\n\t\"product_default\":false,\n\t\"uploaded_on\":\"2017-03-09T00:03:19.181Z\",\n\t\"product_id\":295,\n \"mandatory\":false,\n\t\"uploaded_by\":{\n\t\t\"username\":\"jeff@particle.io\",\n\t\t...\n\t}\n}"
          headers: {}
    put:
      summary: Edit product firmware
      deprecated: false
      description: Edit a specific product firmware version
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: version
          in: path
          description: Version number of the firmware to edit
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "title": "string",
                "description": "string",
                "mandatory": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "PUT /v1/products/:productIdOrSlug/firmware/1\nHTTP/1.1 200 OK\n{\n\t\"_id\":\"58c09bc7df2b9a4d223d9c22\",\n\t\"version\":1,\n\t\"title\":\"New title\",\n\t\"description\":\"New description\",\n\t\"name\":\"firmware.bin\",\n\t\"size\":7952,\n\t\"current\":false\n\t\"uploaded_on\":\"2017-03-09T00:03:19.181Z\",\n\t\"product_id\":295,\n\t\"uploaded_by\":{\n\t\t\"username\":\"jeff@particle.io\",\n\t\t...\n\t}\n}"
          headers: {}
    delete:
      summary: Delete unreleased firmware binary
      deprecated: false
      description: Delete a version of product firmware that has never been released.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: version
          in: path
          description: Version number of firmware to delete
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/products/:productIdOrSlug/firmware/1
                    HTTP/1.1 204 No Content
          headers: {}
  /v1/products/{productIdOrSlug}/firmware:
    get:
      summary: List all product firmwares
      deprecated: false
      description: List all versions of product firmware
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/firmware\nHTTP/1.1 200 OK\n[\n    {\n\t \t\"_id\":\"58c09bc7df2b9a4d223d9c22\",\n\t \t\"version\":1,\n\t \t\"title\":\"My Firmware\",\n\t \t\"description\":\"Sample firmware description\",\n\t \t\"name\":\"firmware.bin\",\n\t \t\"size\":7952,\n\t \t\"product_default\":false,\n\t \t\"uploaded_on\":\"2017-03-09T00:03:19.181Z\",\n\t \t\"product_id\":295,\n\t \t\"uploaded_by\":{\n\t \t\t\"username\":\"jeff@particle.io\",\n\t \t},\n\t    \"groups\":{\n\t\t    [\"asia\",\"europe\",\"america\"],\n\t\t},\n\t    \"device_count\":200\n\t },\n    ...\n]"
          headers: {}
    post:
      summary: Upload product firmware
      deprecated: false
      description: Upload a new firmware version to a product
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "version": 0,
                "title": "string",
                "productIdOrSlug": "string",
                "description": "string",
                "mandatory": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "POST /v1/products/:productIdOrSlug/firmware\nHTTP/1.1 201 Created\n{\n\t\"_id\":\"58c09bc7df2b9a4d223d9c22\",\n\t\"version\":1,\n\t\"title\":\"My Firmware\",\n\t\"description\":\"Sample firmware description\",\n\t\"name\":\"firmware.bin\",\n\t\"size\":7952,\n\t\"current\":false\n\t\"uploaded_on\":\"2017-03-09T00:03:19.181Z\",\n\t\"product_id\":295,\n\t\"uploaded_by\":{\n\t\t\"username\":\"jeff@particle.io\",\n\t\t...\n\t}\n}"
          headers: {}
  /v1/products/{productIdOrSlug}/firmware/{version}/binary:
    get:
      summary: Download firmware binary
      deprecated: false
      description: >-
        Retrieve and download the original binary of a version of product
        firmware.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
        - name: version
          in: path
          description: Version number of firmware to retrieve
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
  /v1/products/{productIdOrSlug}/firmware/release:
    put:
      summary: Release product firmware
      deprecated: false
      description: >-
        Release a version of firmware to the fleet of product devices. When
        releasing as the product default, all non-development devices that are
        not individually locked to a version of product firmware will
        automatically download and run this version of firmware the next time
        they handshake with the cloud. 


        You can also release firmware to specific groups for more fine-grained
        firmware management. 


        Note: Before releasing firmware for the first time, the firmware must be
        running on at least one device in your product fleet that has
        successfully re-connected to the Particle cloud.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "version": 0,
                "product_default": false,
                "groups": "string",
                "intelligent": false
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "PUT /v1/products/:productIdOrSlug/firmware/release\nHTTP/1.1 200 OK\n{\n\t\"updated_at\": \"2017-07-20T23:53:15.298Z\",\n\t\"version\":1,\n\t\"title\":\"New title\",\n\t\"size\":7952,\n\t\"product_default\":false,\n\t\"uploaded_on\":\"2017-03-09T00:03:19.181Z\",\n\t\"product_id\":295,\n\t\"uploaded_by\":{\n\t\t\"username\":\"jeff@particle.io\",\n\t},\n\t\"groups\": [\"foo\", \"bar\", \"baz\"],\n\t\"intelligent\": true\n}"
          headers: {}
  /v1/user/products:
    get:
      summary: List products
      deprecated: false
      description: List products the currently authenticated user has access to
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/user/products
                    HTTP/1.1 200 OK
                    {
                      "products": [{
                        "id": 12345,
                        "platform_id": 10,
                        "name": "My Product",
                        "slug": "my-product",
                        "description": "My test product",
                        "subscription_id": 1234,
                        "user": "me@example.com"
                        "groups": [
                          "one",
                          "two"
                        ],
                        "settings": {
                            "location": {},
                            "known_application": {
                                "opt_in": true
                            },
                            "quarantine": false
                        }
                      }]
                    }
          headers: {}
  /v1/products/{productIdOrSlug}:
    get:
      summary: Retrieve a product
      deprecated: false
      description: Retrieve details for a product.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/products/photon
                    HTTP/1.1 200 OK
                    {
                      "product": {
                        "id": 12345,
                        "platform_id": 10,
                        "name": "My Product",
                        "slug": "my-product",
                        "description": "My test product",
                        "subscription_id": 1234,
                        "user": "me@example.com"
                        "groups": [
                          "one",
                          "two"
                        ],
                        "settings": {
                            "location": {},
                            "known_application": {
                                "opt_in": true
                            },
                            "quarantine": false
                        },
                        "device_protection": "disabled"
                      }
                    }
          headers: {}
  /v1/products/{productIdOrSlug}/team:
    get:
      summary: List team members
      deprecated: false
      description: >-
        List all team members that are part of a given product. Also, will
        retrieve all API users for all the products inside the org
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/team\nHTTP/1.1 200 OK\n{\n\t \"ok\": true.\n\t \"team\": [\n       {\n\t\t\t\"_id\":\"9980222caf8bad191600019b\",\n\t\t\t\"username\":\"jeff@particle.io\",\n\t\t\t\"no_mfa\": true,\n\t\t\t\"scim_provisioned\": true,\n\t\t\t\"no_password\": true\n\t\t},\n\t\t{\n         \"username\": \"test-product-api-user+abc1234@api.particle.io\",\n         \"friendly_name\": \"test-product-api-user\",\n         \"scopes\": [ \"products:list\" ],\n         \"is_programmatic\": true,\n         \"product_id\": 123456\n    },\n     ...\n  ]\n}"
          headers: {}
    post:
      summary: Create an API user
      deprecated: false
      description: >-
        Create an API user with specified scopes. This API user will have a
        single non-expiring access token.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "friendly_name": "string",
                "scopes": [
                  "string",
                  "string"
                ]
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "POST /v1/products/:productIdOrSlug/team\nHTTP/1.1 200 OK\n{\n\t \"ok\": true,\n\t \"created\": {\n\t\t\"username\": \"mytoken+sdfdsfdse34@api.particle.io\",\n     \"is_programmatic\": true,\n     \"tokens\": [\n       \"token\": \"abc123\"\n     ]\n  }\n}"
          headers: {}
  /v1/products/{productIdOrSlug}/team/{username}:
    post:
      summary: Update team member
      deprecated: false
      description: Update a current team member.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: username
          in: path
          description: Username of the team member to be updated
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
          headers: {}
    delete:
      summary: Remove team member
      deprecated: false
      description: Remove a current team member.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: username
          in: path
          description: Username of the team member to be removed
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: " DELETE /v1/products/photon/team/jeff@particle.io\n HTTP/1.1 200 OK\n {\n\t  \"ok\": true\n }"
          headers: {}
  /v1/products/{productIdOrSlug}/team/{username}/token:
    put:
      summary: Regenerate programmatic user's token
      deprecated: false
      description: Regenerate programmatic users token
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or Slug
          required: true
          example: string
          schema:
            type: string
        - name: username
          in: path
          description: Username of the team member to be updated
          required: true
          example: string
          schema:
            type: string
        - name: Content-Type
          in: header
          description: ''
          required: true
          example: application/json
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: " POST /v1/products/photon/team/test+prg123@example.com/team\n HTTP/1.1 200 OK\n {\n\t  \"ok\": true,\n\t  \"updated\":{\n\t\t\"username\": \"test+prg123@example.com\",\n\t\t\"tokens\": [\n\t\t\t{\n\t\t      \"token\": \"abc.123\"\n\t\t  }\n    ]\n\t}\n }"
          headers: {}
  /v1/user/service_agreements:
    get:
      summary: Get user service agreements
      deprecated: false
      description: Get the service agreements related to a user
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: " GET /v1/orgs/particle/service_agreements\n HTTP/1.1 200 OK\n{\n\t\"data\":[\n\t\t\t{\n\t\t\t\t\"id\":\"1\",\n\t\t\t\t\"type\":\"service_agreement\",\n\t\t\t\t\"attributes\":{\n\t\t\t\t\t\"owner_id\":\"abc123\",\n\t\t\t\t\t\"owner_type\":\"individual\",\n\t\t\t\t\t\"name\":\"Sandbox\",\n\t\t\t\t\t\"agreement_type\":\"developer\",\n\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\"state\":\"active\",\n\t\t\t\t\t\"starts_on\":\"2021-04-08\",\n\t\t\t\t\t\"ends_on\":null,\n\t\t\t\t\t\"current_billing_period_start\":\"2021-04-08\",\n\t\t\t\t\t\"current_billing_period_end\":\"2021-05-07\",\n\t\t\t\t\t\"next_billing_period_start\":\"2021-05-08\",\n\t\t\t\t\t\"current_usage_summary\":{\n\t\t\t\t\t\t\"device_limit_reached\":false,\n\t\t\t\t\t\t\"connectivity\":{\n\t\t\t\t\t\t\t\"all\":{\n\t\t\t\t\t\t\t\t\"owned_devices\":0,\n\t\t\t\t\t\t\t\t\"billable_devices\":0,\n\t\t\t\t\t\t\t\t\"device_data\":0,\n\t\t\t\t\t\t\t\t\"device_messages\":0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"wifi\":{\n\t\t\t\t\t\t\t\t\"owned_devices\":0,\n\t\t\t\t\t\t\t\t\"billable_devices\":0,\n\t\t\t\t\t\t\t\t\"device_data\":null,\n\t\t\t\t\t\t\t\t\"device_messages\":0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\t\"owned_devices\":0,\n\t\t\t\t\t\t\t\t\"billable_devices\":0,\n\t\t\t\t\t\t\t\t\"device_data\":0,\n\t\t\t\t\t\t\t\t\"device_messages\":0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\t\"owned_devices\":0,\n\t\t\t\t\t\t\t\t\"billable_devices\":0,\n\t\t\t\t\t\t\t\t\"device_data\":0,\n\t\t\t\t\t\t\t\t\"device_messages\":0\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"pricing_terms\":{\n\t\t\t\t\t\t\"rates\":{\n\t\t\t\t\t\t\t\"all_platforms\":{\n\t\t\t\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\t\t\t\"per_block\":0\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"pricing_model_version\":\"tier2021.1\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"device\":{\n\t\t\t\t\t\t\t\"name\":\"commercial_model:developer:device\",\n\t\t\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\t\t\"max_devices\":100\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"messaging\":{\n\t\t\t\t\t\t\t\"name\":\"commercial_model:developer:messaging\",\n\t\t\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\t\t\"max_messages\":100000\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"device_data\":{\n\t\t\t\t\t\t\t\"uom\":\"bytes\",\n\t\t\t\t\t\t\t\"name\":\"commercial_model:developer:device_data\",\n\t\t\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\t\t\"max_data\":45000000,\n\t\t\t\t\t\t\t\"device_data\":45000000,\n\t\t\t\t\t\t\t\"devices_cap\":45000000,\n\t\t\t\t\t\t\t\"cap_exception\":true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t}"
          headers: {}
  /v1/orgs/{orgIdOrSlug}/service_agreements:
    get:
      summary: Get organization service agreements
      deprecated: false
      description: Get the service agreements related to an organization
      tags: []
      parameters:
        - name: orgIdOrSlug
          in: path
          description: Org ID or Slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: " GET /v1/orgs/particle/service_agreements\n HTTP/1.1 200 OK\n {\n\t\t\"data\":[{\n\t\t\t\"id\":\"1\",\n\t\t\t\"type\":\"service_agreement\",\n\t\t\t\"attributes\":{\n\t\t\t\t\"owner_id\":\"abc123\",\n\t\t\t\t\"owner_type\":\"organization\",\n\t\t\t\t\"name\":\"Enterprise Plan\",\n\t\t\t\t\"agreement_type\":\"enterprise\",\n\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\"state\":\"active\",\n\t\t\t\t\"starts_on\":\"2021-01-01\",\n\t\t\t\t\"ends_on\":\"2026-01-01\",\n\t\t\t\t\"current_billing_period_start\":\"2021-01-01\",\n\t\t\t\t\"current_billing_period_end\":\"2021-12-31\",\n\t\t\t\t\"next_billing_period_start\":\"2022-01-01\",\n\t\t\t\t\"current_usage_summary\":{\n\t\t\t\t\t\"device_limit_reached\":false,\n\t\t\t\t\t\"connectivity\":{\n\t\t\t\t\t\t\"all\":{\n\t\t\t\t\t\t\t\"owned_devices\":1,\n\t\t\t\t\t\t\t\"billable_devices\":1,\n\t\t\t\t\t\t\t\"device_data\":56789012,\n\t\t\t\t\t\t\t\"device_messages\":1234567\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"wifi\":{\n\t\t\t\t\t\t\t\"owned_devices\":1,\n\t\t\t\t\t\t\t\"billable_devices\":1,\n\t\t\t\t\t\t\t\"device_data\":null,\n\t\t\t\t\t\t\t\"device_messages\":123456\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\"owned_devices\":1,\n\t\t\t\t\t\t\t\"billable_devices\":1,\n\t\t\t\t\t\t\t\"device_data\":12345,\n\t\t\t\t\t\t\t\"device_messages\":123456\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\"owned_devices\":1,\n\t\t\t\t\t\t\t\"billable_devices\":1,\n\t\t\t\t\t\t\t\"device_data\":12345678,\n\t\t\t\t\t\t\t\"device_messages\":123456\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"pricing_terms\":{\n\t\t\t\t\t\"device_data\":{\n\t\t\t\t\t\t\"uom\":\"bytes\",\n\t\t\t\t\t\t\"name\":\"commercial_model:enterprise:device_data\",\n\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\"max_data\":12000000000\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\"max_data\":12000000000\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"rates\":{\n\t\t\t\t\t\t\"wifi\":{\n\t\t\t\t\t\t\t\"tier\":0,\n\t\t\t\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\t\t\t\"list_price\":1234\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\"tier\":3,\n\t\t\t\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\t\t\t\"list_price\":1234\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\"tier\":3,\n\t\t\t\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\t\t\t\"list_price\":123456\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"pricing_model_version\":\"tier2021.1\"\n\t\t\t\t\t},\n\t\t\t\t\t\"messaging\":{\n\t\t\t\t\t\t\"name\":\"commercial_model:enterprise:messaging\",\n\t\t\t\t\t\t\"wifi\":{\n\t\t\t\t\t\t\t\"max_messages\":46800000\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\"max_messages\":182400000\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"duration\":\"annual\",\n\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\"max_messages\":237120000\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"device\":{\n\t\t\t\t\t\t\"name\":\"commercial_model:enterprise:device\",\n\t\t\t\t\t\t\"wifi\":{\n\t\t\t\t\t\t\t\"max_devices\":1500\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"cellular\":{\n\t\t\t\t\t\t\t\"max_devices\":1810\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"duration\":\"monthly\",\n\t\t\t\t\t\t\"asset_tracker\":{\n\t\t\t\t\t\t\t\"max_devices\":1810\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t\"support\":{\n\t\t\t\t\t\t\"account_rep\":\"support@example.com\"\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n}"
          headers: {}
  /v1/user/usage_reports/{usageReportId}:
    get:
      summary: Get a user usage report
      deprecated: false
      description: >-
        Get a single usage report related to the user. Expect "download_url" to
        be present only when the usage report has an "available" state.
      tags: []
      parameters:
        - name: usageReportId
          in: path
          description: The usage report ID
          required: true
          example: ''
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     GET /v1/user/usage_reports/:usageReportId
                     HTTP/1.1 200 OK
                    {
                    "data": {
                      "id": "1",
                      "type": "usage_report",
                      "attributes": {
                        "state": "pending",
                        "service_agreement_id": 1,
                        "date_period_start": "2022-01-01",
                        "date_period_end": "2022-02-01",
                        "created_at": "2022-01-18 13:43:23 -0800",
                        "expires_at": null,
                        "report_type": "devices",
                        "report_params": {
                          "devices": [
                            "device1",
                            "device2"
                          ],
                          "products": [],
                          "recipient_list": [
                            "your@email.com"
                          ]
                        },
                        "download_url": null
                      }
                    }
          headers: {}
  /v1/orgs/{orgSlugOrId}/usage_reports/{usageReportId}:
    get:
      summary: Get an org usage report
      deprecated: false
      description: >-
        Get a single usage report related to an organization. Expect
        "download_url" to be present only when the usage report has an
        "available" state. 


        The user must be an active member of the organization.
      tags: []
      parameters:
        - name: usageReportId
          in: path
          description: The usage report ID
          required: true
          example: ''
          schema:
            type: string
        - name: orgSlugOrId
          in: path
          description: Organization Slug or ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     GET /v1/orgs/:orgSlugOrId/usage_reports/:usageReportId
                     HTTP/1.1 200 OK
                    {
                    "data": {
                      "id": "1",
                      "type": "usage_report",
                      "attributes": {
                        "state": "pending",
                        "service_agreement_id": 1,
                        "date_period_start": "2022-01-01",
                        "date_period_end": "2022-02-01",
                        "created_at": "2022-01-18 13:43:23 -0800",
                        "expires_at": null,
                        "report_type": "devices",
                        "report_params": {
                          "devices": [
                            "device1",
                            "device2"
                          ],
                          "products": [],
                          "recipient_list": [
                            "your@email.com"
                          ]
                        },
                        "download_url": null
                      }
                    }
          headers: {}
  /v1/user/service_agreements/{serviceAgreementId}/notifications:
    get:
      summary: Get notifications for current usage period
      deprecated: false
      description: |-
        Get user notifications related to a specific service agreement 

        - Usage reached a certain threshold (70%, 90%, 100%)
        - Service was paused
        - Service was unpaused
      tags: []
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service agreement ID
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/user/service_agreements/1234/notifications\n HTTP/1.1 200 OK\n{\n\"data\":[\n{\n\t\t\"id\": \"fff25e4e-7457-4c3c-8f6e-c9d6dfc01110\",\n\t\t\"type\": \"notification\",\n\t\t\"attributes\": {\n\t\t\t\t\"state\": \"completed\",\n\t\t\t\t\"event_name\": \"developer:usage_activity:automatic_unpause\",\n\t\t\t\t\"time_period\": \"2022-01-22\",\n\t\t\t\t\"created_at\": \"2022-01-22 00:01:00 -0800\",\n\t\t\t\t\"resource_id\": \"59\",\n\t\t\t\t\"resource_type\": \"ServiceAgreement\",\n\t\t\t\t\"details\": {\n\t\t\t\t\t\t\t\"event_type\": \"automatic_unpause\",\n\t\t\t\t\t\t\t\"hierarchy_info\": {\n\t\t\t\t\t\t\t\t\t\"name\": \"automatic_unpause\",\n\t\t\t\t\t\t\t\t\t\"priority\": 7\n\t\t\t\t\t\t\t},\n\t\t\t\t\"device_pause_date\": \"2022-01-22T00:01:00.567-08:00\",\n\t\t\t\t\"next_billing_period_start\": \"2022-02-22\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t]\n\t}"
          headers: {}
  /v1/user/service_agreements/{serviceAgreementId}/usage_reports:
    post:
      summary: Create a user usage report
      deprecated: false
      description: >-
        Request a new usage report related to the user service agreement. 


        The usage report will be processed asynchronously. Expect its "state" to
        change throughout time.
      tags: []
      parameters:
        - name: serviceAgreementId
          in: path
          description: Service Agreement ID
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "report_type": "string",
                "date_period_start": "string",
                "date_period_end": "string",
                "devices": [
                  "string",
                  "string"
                ],
                "products": [
                  "string",
                  "string"
                ]
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     POST /v1/user/service_agreements/:serviceAgreementId/usage_reports/
                     HTTP/1.1 202 OK
                    {
                    "data": {
                      "id": "1",
                      "type": "usage_report",
                      "attributes": {
                        "state": "pending",
                        "service_agreement_id": 1,
                        "date_period_start": "2022-01-01",
                        "date_period_end": "2022-01-31",
                        "created_at": "2022-01-18 13:43:23 -0800",
                        "expires_at": null,
                        "report_type": "devices",
                        "report_params": {
                          "devices": [
                            "device1",
                            "device2"
                          ],
                          "products": [],
                          "recipient_list": [
                            "your@email.com"
                          ]
                        },
                        "download_url": null
                      }
                    }
          headers: {}
  /v1/orgs/{orgSlugOrId}/service_agreements/{serviceAgreementId}/usage_reports:
    post:
      summary: Create an org usage report
      deprecated: false
      description: >-
        Request a new usage report related to the organization service
        agreement. 


        The usage report will be processed asynchronously. Expect its "state" to
        change throughout time. 


        The user must be an active member of the organization.
      tags: []
      parameters:
        - name: orgSlugOrId
          in: path
          description: Organization Slug or ID
          required: true
          example: string
          schema:
            type: string
        - name: serviceAgreementId
          in: path
          description: Service Agreement ID
          required: true
          example: ''
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "report_type": "string",
                "date_period_start": "string",
                "date_period_end": "string",
                "devices": [
                  "string",
                  "string"
                ],
                "products": [
                  "string",
                  "string"
                ]
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |2-
                     POST /v1/orgs/:orgSlugOrId/service_agreements/:serviceAgreementId/usage_reports/
                     HTTP/1.1 202 OK
                    {
                    "data": {
                      "id": "1",
                      "type": "usage_report",
                      "attributes": {
                        "state": "pending",
                        "service_agreement_id": 1,
                        "date_period_start": "2022-01-01",
                        "date_period_end": "2022-01-31",
                        "created_at": "2022-01-18 13:43:23 -0800",
                        "expires_at": null,
                        "report_type": "devices",
                        "report_params": {
                          "devices": [
                            "device1",
                            "device2"
                          ],
                          "products": [],
                          "recipient_list": [
                            "your@email.com"
                          ]
                        },
                        "download_url": null
                      }
                    }
          headers: {}
  /v1/sims:
    get:
      summary: List SIM cards
      deprecated: false
      description: >-
        Get a list of the SIM cards owned by an individual or a product. The
        product endpoint is paginated, by default returns 25 SIM card records
        per page.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
        - name: iccid
          in: query
          description: Filter results to SIMs with this ICCID (partial matching)
          required: false
          example: string
          schema:
            type: string
        - name: deviceId
          in: query
          description: >-
            Filter results to SIMs with this associated device ID (partial
            matching)
          required: false
          example: string
          schema:
            type: string
        - name: deviceName
          in: query
          description: >-
            Filter results to SIMs with this associated device name (partial
            matching)
          required: false
          example: string
          schema:
            type: string
        - name: page
          in: query
          description: Current page of results
          required: false
          example: '0'
          schema:
            type: string
        - name: perPage
          in: query
          description: Records per page
          required: false
          example: '0'
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/sims\nHTTP/1.1 200 OK\n{\n\t\"sims\": [\n\t \t{\n\n\t\t\t\"_id\":\"8934076500002589174\",\n\t\t\t\"activations_count\":1,\n\t\t\t\"base_country_code\":\"US\",\n\t\t\t\"base_monthly_rate\":299,\n\t\t\t\"deactivations_count\":0,\n\t\t\t\"first_activated_on\":\"2017-01-27T23:10:16.994Z\",\n\t\t\t\"last_activated_on\":\"2017-01-27T23:10:16.994Z\",\n\t\t\t\"last_activated_via\":\"user_setup\",\n\t\t\t\"last_status_change_action\":\"activate\",\n\t\t\t\"last_status_change_action_error\":\"no\",\n\t\t\t\"msisdn\":\"345901000485300\",\n\t\t\t\"overage_monthly_rate\":99,\n\t\t\t\"status\":\"active\",\n\t\t\t\"stripe_plan_slug\":\"KickstarterElectronPlan\",\n\t\t\t\"updated_at\":\"2017-01-27T23:10:22.622Z\",\n\t\t\t\"user_id\":\"5580999caf8bad191600019b\",\n\t\t\t\"carrier\":\"telefonica\",\n\t\t\t\"last_device_id\":\"123abc\",\n\t\t\t\"last_device_name\":\"foo_bar_baz\"\n\t\t},\n\t\t...\n\t]\n}"
          headers: {}
  /v1/sims/{iccid}:
    get:
      summary: Get SIM information
      deprecated: false
      description: Retrieve a SIM card owned by an individual or a product.
      tags: []
      parameters:
        - name: iccid
          in: path
          description: >-
            Filter results to SIMs with this ICCID (partial matching) Product
            endpoint only
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/sims/8934076500002589174
                    HTTP/1.1 200 OK
                    {
                      {
                        "_id":"8934076500002589174",
                        "activations_count":1,
                        "base_country_code":"US",
                        "base_monthly_rate":299,
                        "deactivations_count":0,
                        "first_activated_on":"2017-01-27T23:10:16.994Z",
                        "last_activated_on":"2017-01-27T23:10:16.994Z",
                        "last_activated_via":"user_setup",
                        "last_status_change_action":"activate",
                        "last_status_change_action_error":"no",
                        "msisdn":"345901000485300",
                        "overage_monthly_rate":99,
                        "status":"active",
                        "stripe_plan_slug":"KickstarterElectronPlan",
                        "updated_at":"2017-01-27T23:10:22.622Z",
                        "user_id":"5580999caf8bad191600019b",
                        "carrier":"telefonica",
                        "last_device_id":"123abc",
                        "last_device_name":"foo_bar_baz",
                        "owner": "someone@particle.io"
                      }
                    }
          headers: {}
    put:
      summary: Reactivate SIM
      deprecated: false
      description: >-
        Re-enables a SIM card to connect to a cell tower. Do this if you'd like
        to reactivate a SIM that you have deactivated.
      tags: []
      parameters:
        - name: iccid
          in: path
          description: The ICCID of the SIM to update
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "action": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/sims/12345
                    HTTP/1.1 200 OK
          headers: {}
    delete:
      summary: Release SIM from account
      deprecated: false
      description: >-
        Remove a SIM card from an account, disassociating the SIM card from a
        user or a product. The SIM will also be deactivated. 


        Once the SIM card has been released, it can be claimed by a different
        user, or imported into a different product.
      tags: []
      parameters:
        - name: iccid
          in: path
          description: The ICCID of the desired SIM
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/sims/1234
                    HTTP/1.1 204 No Content
          headers: {}
        x-200:Response:
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    DELETE /v1/sims/1234
                    HTTP/1.1 202 Accepted
          headers: {}
  /v1/sims/{iccid}/data_usage:
    get:
      summary: Get data usage
      deprecated: false
      description: >-
        Get SIM card data usage for the current billing period, broken out by
        day. Note that date usage reports can be delayed by up to 1 hour.
      tags: []
      parameters:
        - name: iccid
          in: path
          description: The ICCID of the desired SIM
          required: true
          example: string
          schema:
            type: string
        - name: productIdOrSlug
          in: path
          description: Product ID or slug. Product endpoint only
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/sims/:iccid/data_usage\nHTTP/1.1 200 OK\n{\n\t\"iccid\":\"8934076500002589174\",\n\t\"usage_by_day\": [\n\t\t{\n\t\t\t\"date\":\"2017-02-24\",\n\t\t\t\"mbs_used\":0.98,\n\t\t\t\"mbs_used_cumulative\":0.98\n\t\t},\n\t\t{\n\t\t\t\"date\":\"2017-02-25\",\n\t\t\t\"mbs_used\":0.50,\n\t\t\t\"mbs_used_cumulative\":1.48\n\t\t},\n\t\t...\n\t]\n}"
          headers: {}
  /v1/products/{productIdOrSlug}/sims/data_usage:
    get:
      summary: Get data usage for product fleet
      deprecated: false
      description: >-
        Get fleet-wide SIM card data usage for a product in the current billing
        period, broken out by day. Daily usage totals represent an aggregate of
        all SIM cards that make up the product. Data usage reports can be
        delayed until the next day, and occasionally by several days.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: "GET /v1/products/:productIdOrSlug/sims/data_usage\nHTTP/1.1 200 OK\n{\n\t\"total_mbs_used\":200.00,\n\t\"total_active_sim_cards\":2000,\n\t\"usage_by_day\": [\n\t\t{\n\t\t\t\"date\":\"2017-03-01\",\n\t\t\t\"mbs_used\":100.00,\n\t\t\t\"mbs_used_cumulative\":100.00\n\t\t},\n\t\t{\n\t\t\t\"date\":\"2017-03-02\",\n\t\t\t\"mbs_used\":100.00,\n\t\t\t\"mbs_used_cumulative\":200.00\n\t\t},\n\t\t...\n\t]\n}"
          headers: {}
  /v1/products/{productIdOrSlug}/sims:
    post:
      summary: Import and activate product SIMs
      deprecated: false
      description: >-
        Import a group of SIM cards into a product. SIM cards will be activated
        upon import. Either pass an array of ICCIDs or include a file containing
        a list of SIM cards. 


        Import and activation will be queued for processing. You will receive an
        email with the import results when all SIM cards have been processed. 


        Importing a SIM card associated with a device will also import the
        device into the product.
      tags: []
      parameters:
        - name: productIdOrSlug
          in: path
          description: Product ID or slug
          required: true
          example: string
          schema:
            type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "sims": [
                  "string",
                  "string"
                ]
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/products/:productIdOrSlug/sims
                    HTTP/1.1 200 OK
                    {
                      ok: true
                    }
          headers: {}
  /user:
    get:
      summary: Get user
      deprecated: false
      description: Return the user resource for the currently authenticated user.
      tags: []
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    GET /v1/user
                    HTTP/1.1 200 OK
                    {
                      "username": "testuser@particle.io",
                      "subscription_ids": [],
                      "account_info": {
                        "first_name": "Test",
                        "last_name": "User",
                        "business_account": false
                      },
                      scim_provisioned: false,
                      no_password: false,
                      "mfa": {
                        "enabled": false
                      },
                      "wifi_device_count": 0,
                      "cellular_device_count": 0
                    }
          headers: {}
    put:
      summary: Delete user
      deprecated: false
      description: >-
        Delete the logged-in user. Allows removing user account and artifacts
        from Particle system
      tags: []
      parameters: []
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "password": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    PUT /v1/user
                    HTTP/1.1 200 OK
                    {
                      "ok": true,
                      "message": "User's account has been deleted."
                    }
          headers: {}
  /user/password-reset:
    post:
      summary: Forgot password
      deprecated: false
      description: >-
        Create a new password reset token and send the user an email with the
        token. This endpoint is rate-limited to prevent abuse. 


        Note: This endpoint does not require an access token.
      tags: []
      parameters: []
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            example: |-
              {
                "username": "string"
              }
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                '1':
                  summary: Response
                  value: |-
                    POST /v1/user/password-reset
                    HTTP/1.1 200 OK
                    {
                      "ok": true,
                      "message": "Password reset email sent."
                    }
          headers: {}
components:
  schemas:

    CallFunctionRequest:
      type: object
      additionalProperties:
        type: string

    DeviceVariableResult:
      type: object
      description: A device variable has been retrieved.
      properties:
        result:
          type: string

    DeviceFunctionResponse:
      type: object
      description: A device function has been executed.
      properties:
        id:
          type: string
        name:
          type: string
        connected:
          type: boolean
        return_value:
          type: integer

    Device:
      type: object
      description: A device has been retrieved.
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        last_ip_address:
          type: string
        last_heard:
          type: string
        last_handshake_at:
          type: string
        product_id:
          type: integer
        online:
          type: boolean
        platform_id:
          type: integer
        cellular:
          type: boolean
        notes:
          type: string
        functions:
          type: array
          items:
            type: string
        variables:
          type: object
          additionalProperties:
            type: string
        status:
          type: string
        serial_number:
          type: string
        iccid:
          type: string
        imei:
          type: string
        mac_wifi:
          type: string
        mobile_secret:
          type: string
        system_firmware_version:
          type: string
        firmware_updates_enabled:
          type: boolean
        firmware_updates_forced:
          type: boolean
        device_protection:
          type: object
          additionalProperties:
            type: string

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
security:
        - bearerAuth: [ ] # use the same name as above
servers:
  - url: https://api.particle.io